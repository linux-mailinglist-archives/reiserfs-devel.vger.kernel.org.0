Return-Path: <reiserfs-devel-owner@vger.kernel.org>
X-Original-To: lists+reiserfs-devel@lfdr.de
Delivered-To: lists+reiserfs-devel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id EA45833F0DC
	for <lists+reiserfs-devel@lfdr.de>; Wed, 17 Mar 2021 14:07:05 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229803AbhCQNGW (ORCPT <rfc822;lists+reiserfs-devel@lfdr.de>);
        Wed, 17 Mar 2021 09:06:22 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37046 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230330AbhCQNGL (ORCPT
        <rfc822;reiserfs-devel@vger.kernel.org>);
        Wed, 17 Mar 2021 09:06:11 -0400
Received: from mail-qt1-x832.google.com (mail-qt1-x832.google.com [IPv6:2607:f8b0:4864:20::832])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 33CB7C06174A
        for <reiserfs-devel@vger.kernel.org>; Wed, 17 Mar 2021 06:06:11 -0700 (PDT)
Received: by mail-qt1-x832.google.com with SMTP id 73so1257896qtg.13
        for <reiserfs-devel@vger.kernel.org>; Wed, 17 Mar 2021 06:06:11 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=metztli-com.20150623.gappssmtp.com; s=20150623;
        h=message-id:subject:from:to:cc:date:user-agent:mime-version;
        bh=NhNXhJsWcU+/wxj/ClD/+8qOe0G+5mIVsTNAyiENEBQ=;
        b=QgmFb6N9HczdqQ+kIYpYMTwubTJNTBeWzJrlLsXsAvu7EN8uCiYTJJ8HxG6OwucLon
         mhep3QbGWxU/TcPtaDhwU8IaoC2MNV1y/FKAWoY5Bs869NuF865NRma4dDfcRS3ohCUr
         nclaW/NkCwVQZOpMjV3ZRCD8oUFT0AB3uz734F71TLYr234z415iNXtoOwD+LGk9N+tr
         bJKVBThpjPTxxPOz4XPPozu2ZuE7fvWSWOPEMDlA37txJFXKtYmvpQZ5dqhIBBtJhX0/
         ep8WBUhe5o2EnYy6iiorWvLYhpNdMjROSY+mlnpVL3IuD5X9IK6grHnkA2ql85WFMaa8
         WYig==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:message-id:subject:from:to:cc:date:user-agent
         :mime-version;
        bh=NhNXhJsWcU+/wxj/ClD/+8qOe0G+5mIVsTNAyiENEBQ=;
        b=QxpXvaF7fzvXD/UZ+vamW3AcmGTl/ib8eZrkQ+WZ0qvHBC4dC4R0cQTw6gaVk9D1b2
         2VpuVKuKufqL7aklpOBe0TgcvZpsSc6W0NQBigyk6or73NFf5vkrdO/gCRPq3Yb4TBGr
         Mjx31L2STXaPgThOLU7XW/i5oLmXsDsHEJwuXg4+XE4seHr89HZMDKiRgluhkaYJtAje
         zxun335mPEmFOUyb71ruhvfZ5gk+yUMSpF5Rj3oSbFYyV4ed2rnsIzs6RZHBYdkrA1IM
         GJdWsKyEIYltVs+jpvrNj8T4g8IvVnLmJao0pYj2j7YwC7n9EtT59ix14cjaANlQVCyf
         LrOw==
X-Gm-Message-State: AOAM531OZCHbj02J5+Fpxi7kuShRSwKFZ9/+E1qJ5UYl43XYNngh4+7X
        paMseXhkkPnCDi+dyHhCcq64gh5DSh4drlky
X-Google-Smtp-Source: ABdhPJxaG03BixXhJmIlZugkSPGacQKPA1kGSyOQfBtTTk67rZrUVDM9hj2UglUaqTitbSHq9FQrjg==
X-Received: by 2002:ac8:5a0d:: with SMTP id n13mr3920561qta.211.1615986369971;
        Wed, 17 Mar 2021 06:06:09 -0700 (PDT)
Received: from ?IPv6:2600:1700:6470:27a0:4e80:93ff:fe00:3ff7? ([2600:1700:6470:27a0:4e80:93ff:fe00:3ff7])
        by smtp.gmail.com with ESMTPSA id d68sm17351205qkf.93.2021.03.17.06.06.07
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Wed, 17 Mar 2021 06:06:08 -0700 (PDT)
Message-ID: <24b756c14405804f4211834f83c8d34742a47c85.camel@metztli.com>
Subject: Patch: Enable 'kernel read' on reiser4 sfrn4/5 for Linux 5.10.20-23
 (at least)
From:   Metztli Information Technology <jose.r.r@metztli.com>
To:     ReiserFS Development List <reiserfs-devel@vger.kernel.org>
Cc:     Edward Shishkin <edward.shishkin@gmail.com>
Date:   Wed, 17 Mar 2021 06:06:06 -0700
Content-Type: multipart/mixed; boundary="=-AfVSSUZMOPYSVmfIS2ef"
User-Agent: Evolution 3.38.3-1 
MIME-Version: 1.0
Precedence: bulk
List-ID: <reiserfs-devel.vger.kernel.org>
X-Mailing-List: reiserfs-devel@vger.kernel.org


--=-AfVSSUZMOPYSVmfIS2ef
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit

Niltze-

The attached patch represent an ephemeral hack which has allowed me to
build functional reiser4 -enabled Linux v5.10.20 - v5.10.23 kernels.

The currently testing Debian Linux 5.10.15-2 cloud flavour kernel has
been humming along nicely for thirty days already in Google Compute
Engine (GCE) / AMD Epyc region, hence 'reizer4' label.

< https://metztli.it/buster/cloud-5.10.15-2+reizer4.0.2.png >

I will be upgrading that image to Debian Linux v5.10.20-2 soon -- as I
have the non-cloud kernel working locally in Debian Buster backports
GCC8 for AMD64. Additionally, I have the upcoming Debian Bullseye GCC10
with a Linux 5.10.23-2 kernel running without issues.

None of the above would be possible without the attached 'kernel read'
patch and I would have fallen far behind Debian kernel building --
which thus far I have managed to stay at least one version ahead of the
official releases for Buster backports and upcoming Bullseye versions.

Attached, please also find a patch to reiser4 -enable GNU Parted 3.4
*probe only*. This parted version is already being used in upcoming
Debian Bullseye and I decided to backport it for Buster -- as can be
discerned in the image referenced a priori.

Finally, I have also patched, attached as well, reiser4progs which
fixes the UUID null issue which Ed resolved this past weekend. I made
the judgement (aided by autoconf) that the micro number should be
increased by a unit and it is reflected in the image referenced a
priori, as well.

Of course, the call to increase -- or not -- the micro number is not
mine to make. However, I wanted to avoid any confusion as I use the
special reiser4progs v1.2.2 UDEBs for my custom Debian Installer (d-i).
And indeed, I had noticed some null UUIDs now and then during my past
Debian reiser4 installations -- when I was struggling to come up with
my reiser4 custom (d-i) ; notwithstanding I was at a loss as to what
variable was at fault.

Personally, it was not too bad, though, because when the UUID string
was null I would use the tiny xvi and/or elvis-tiny, vi-clone editors,
integrated in my custom d-i to fix the string after a re-formating of
the target partition.


Best Professional Regards.
-- 
-- 
Jose R R
http://metztli.it
-----------------------------------------------------------------------
----------------------
Download Metztli Reiser4: Debian Buster w/ Linux 5.9.16 AMD64
-----------------------------------------------------------------------
----------------------
feats ZSTD compression https://sf.net/projects/metztli-reiser4/
-----------------------------------------------------------------------
----------------------
or SFRN 5.1.3, Metztli Reiser5 https://sf.net/projects/debian-reiser4/
-----------------------------------------------------------------------
--------------------
Official current Reiser4 resources: https://reiser4.wiki.kernel.org/


--=-AfVSSUZMOPYSVmfIS2ef
Content-Disposition: attachment; filename="linux-5.10.20-enable-kernel-read-on-reiser4.patch"
Content-Type: text/x-patch; name="linux-5.10.20-enable-kernel-read-on-reiser4.patch";
	charset="UTF-8"
Content-Transfer-Encoding: base64

RnJvbSBmNWYzMGI0NzcyYWIwZmNkMzBlZGIxNDVmM2M3MDI2MmE2NDU0ZWI2IE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBNZXR6dGxpIEluZm9ybWF0aW9uIFRlY2hub2xvZ3kgPGpvc2VA
bWV0enRsaS5pdD4KRGF0ZTogRnJpLCA1IE1hciAyMDIxIDAzOjE3OjU3IC0wODAwClN1YmplY3Q6
IFtQQVRDSF0gSWMgY2UgKEZpcnN0KSBjb21taXQgb24gNS4xMC4yMCBtYW51YWxseSBtb2RpZnlp
bmcKIGZzL3Byb2MvcHJvY19zeXNjdGwuYyBhZnRlciAna2VybmVsIHJlYWQnIHBhdGNoIGFwcGxp
ZWQKCi0tLQogYXJjaC9LY29uZmlnICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAzIC0K
IGFyY2gveDg2L2lhMzIvaWEzMl9hb3V0LmMgICAgICAgICAgICAgICB8ICAgMSArCiBhcmNoL3g4
Ni9pbmNsdWRlL2FzbS9wYWdlXzMyX3R5cGVzLmggICAgfCAgMTEgLS0KIGFyY2gveDg2L2luY2x1
ZGUvYXNtL3BhZ2VfNjRfdHlwZXMuaCAgICB8ICAzOCAtLS0tLS0tCiBhcmNoL3g4Ni9pbmNsdWRl
L2FzbS9wcm9jZXNzb3IuaCAgICAgICAgfCAgNjAgKysrKysrKysrKy0KIGFyY2gveDg2L2luY2x1
ZGUvYXNtL3RocmVhZF9pbmZvLmggICAgICB8ICAgMiArCiBhcmNoL3g4Ni9pbmNsdWRlL2FzbS91
YWNjZXNzLmggICAgICAgICAgfCAgMjYgKysrKy0KIGFyY2gveDg2L2tlcm5lbC9hc20tb2Zmc2V0
cy5jICAgICAgICAgICB8ICAgMyArCiBhcmNoL3g4Ni9saWIvZ2V0dXNlci5TICAgICAgICAgICAg
ICAgICAgfCAgNDcgKysrKystLS0tCiBhcmNoL3g4Ni9saWIvcHV0dXNlci5TICAgICAgICAgICAg
ICAgICAgfCAgMjUgKysrLS0KIGRyaXZlcnMvbWlzYy9sa2R0bS9idWdzLmMgICAgICAgICAgICAg
ICB8ICAxMCArKwogZHJpdmVycy9taXNjL2xrZHRtL2NvcmUuYyAgICAgICAgICAgICAgIHwgICAy
ICsKIGRyaXZlcnMvbWlzYy9sa2R0bS9sa2R0bS5oICAgICAgICAgICAgICB8ICAgMiArCiBkcml2
ZXJzL21pc2MvbGtkdG0vdXNlcmNvcHkuYyAgICAgICAgICAgfCAgMTUgKysrCiBmcy9wcm9jL2Nw
dWluZm8uYyAgICAgICAgICAgICAgICAgICAgICAgfCAgIDIgKy0KIGZzL3Byb2MvZ2VuZXJpYy5j
ICAgICAgICAgICAgICAgICAgICAgICB8ICAgNCArLQogZnMvcHJvYy9pbm9kZS5jICAgICAgICAg
ICAgICAgICAgICAgICAgIHwgMTI0ICsrKysrKysrLS0tLS0tLS0tLS0tLS0KIGZzL3Byb2MvcHJv
Y19zeXNjdGwuYyAgICAgICAgICAgICAgICAgICB8ICA0OCArKysrLS0tLS0KIGZzL3Byb2Mvc3Rh
dC5jICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgMiArLQogZnMvcmVhZF93cml0ZS5jICAg
ICAgICAgICAgICAgICAgICAgICAgIHwgIDcxICsrKysrLS0tLS0tLS0KIGZzL3NwbGljZS5jICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICB8IDEzMCArKysrKysrKysrKysrKysrKysrKystLS0K
IGluY2x1ZGUvbGludXgvYnBmLWNncm91cC5oICAgICAgICAgICAgICB8ICAgMiArLQogaW5jbHVk
ZS9saW51eC9mcy5oICAgICAgICAgICAgICAgICAgICAgIHwgICAyICsKIGluY2x1ZGUvbGludXgv
cHJvY19mcy5oICAgICAgICAgICAgICAgICB8ICAgMSAtCiBpbmNsdWRlL2xpbnV4L3VhY2Nlc3Mu
aCAgICAgICAgICAgICAgICAgfCAgMjIgKy0tLQoga2VybmVsL2JwZi9jZ3JvdXAuYyAgICAgICAg
ICAgICAgICAgICAgIHwgICAyICstCiBsaWIvdGVzdF9iaXRtYXAuYyAgICAgICAgICAgICAgICAg
ICAgICAgfCAgOTEgKysrKysrKysrKysrKy0tLS0KIHRvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2xr
ZHRtL3Rlc3RzLnR4dCB8ICAgMiArCiAyOCBmaWxlcyBjaGFuZ2VkLCA0NDIgaW5zZXJ0aW9ucygr
KSwgMzA2IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gvS2NvbmZpZyBiL2FyY2gvS2Nv
bmZpZwppbmRleCA2OWZlNzEzM2M3NjUuLmY4NzY5ZTYxNzU3YiAxMDA2NDQKLS0tIGEvYXJjaC9L
Y29uZmlnCisrKyBiL2FyY2gvS2NvbmZpZwpAQCAtMjQsOSArMjQsNiBAQCBjb25maWcgS0VYRUNf
RUxGCiBjb25maWcgSEFWRV9JTUFfS0VYRUMKIAlib29sCiAKLWNvbmZpZyBTRVRfRlMKLQlib29s
Ci0KIGNvbmZpZyBIT1RQTFVHX1NNVAogCWJvb2wKIApkaWZmIC0tZ2l0IGEvYXJjaC94ODYvaWEz
Mi9pYTMyX2FvdXQuYyBiL2FyY2gveDg2L2lhMzIvaWEzMl9hb3V0LmMKaW5kZXggYTA5ZmMzN2Vh
ZDlkLi5jYThhNjU3ZWRmNTkgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2lhMzIvaWEzMl9hb3V0LmMK
KysrIGIvYXJjaC94ODYvaWEzMi9pYTMyX2FvdXQuYwpAQCAtMjM5LDYgKzIzOSw3IEBAIHN0YXRp
YyBpbnQgbG9hZF9hb3V0X2JpbmFyeShzdHJ1Y3QgbGludXhfYmlucHJtICpicHJtKQogCShyZWdz
KS0+c3MgPSBfX1VTRVIzMl9EUzsKIAlyZWdzLT5yOCA9IHJlZ3MtPnI5ID0gcmVncy0+cjEwID0g
cmVncy0+cjExID0KIAlyZWdzLT5yMTIgPSByZWdzLT5yMTMgPSByZWdzLT5yMTQgPSByZWdzLT5y
MTUgPSAwOworCXNldF9mcyhVU0VSX0RTKTsKIAlyZXR1cm4gMDsKIH0KIApkaWZmIC0tZ2l0IGEv
YXJjaC94ODYvaW5jbHVkZS9hc20vcGFnZV8zMl90eXBlcy5oIGIvYXJjaC94ODYvaW5jbHVkZS9h
c20vcGFnZV8zMl90eXBlcy5oCmluZGV4IGY0NjI4OTVhMzNlNC4uNTY1YWQ3NTVjNzg1IDEwMDY0
NAotLS0gYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wYWdlXzMyX3R5cGVzLmgKKysrIGIvYXJjaC94
ODYvaW5jbHVkZS9hc20vcGFnZV8zMl90eXBlcy5oCkBAIC00MSwxNyArNDEsNiBAQAogI2RlZmlu
ZSBfX1ZJUlRVQUxfTUFTS19TSElGVAkzMgogI2VuZGlmCS8qIENPTkZJR19YODZfUEFFICovCiAK
LS8qCi0gKiBVc2VyIHNwYWNlIHByb2Nlc3Mgc2l6ZTogM0dCIChkZWZhdWx0KS4KLSAqLwotI2Rl
ZmluZSBJQTMyX1BBR0VfT0ZGU0VUCV9fUEFHRV9PRkZTRVQKLSNkZWZpbmUgVEFTS19TSVpFCQlf
X1BBR0VfT0ZGU0VUCi0jZGVmaW5lIFRBU0tfU0laRV9MT1cJCVRBU0tfU0laRQotI2RlZmluZSBU
QVNLX1NJWkVfTUFYCQlUQVNLX1NJWkUKLSNkZWZpbmUgREVGQVVMVF9NQVBfV0lORE9XCVRBU0tf
U0laRQotI2RlZmluZSBTVEFDS19UT1AJCVRBU0tfU0laRQotI2RlZmluZSBTVEFDS19UT1BfTUFY
CQlTVEFDS19UT1AKLQogLyoKICAqIEtlcm5lbCBpbWFnZSBzaXplIGlzIGxpbWl0ZWQgdG8gNTEy
IE1CIChzZWUgaW4gYXJjaC94ODYva2VybmVsL2hlYWRfMzIuUykKICAqLwpkaWZmIC0tZ2l0IGEv
YXJjaC94ODYvaW5jbHVkZS9hc20vcGFnZV82NF90eXBlcy5oIGIvYXJjaC94ODYvaW5jbHVkZS9h
c20vcGFnZV82NF90eXBlcy5oCmluZGV4IDNmNDlkYWMwMzYxNy4uZDBjNmMxMGMxOGEwIDEwMDY0
NAotLS0gYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wYWdlXzY0X3R5cGVzLmgKKysrIGIvYXJjaC94
ODYvaW5jbHVkZS9hc20vcGFnZV82NF90eXBlcy5oCkBAIC01OSw0NCArNTksNiBAQAogI2RlZmlu
ZSBfX1ZJUlRVQUxfTUFTS19TSElGVAk0NwogI2VuZGlmCiAKLS8qCi0gKiBVc2VyIHNwYWNlIHBy
b2Nlc3Mgc2l6ZS4gIFRoaXMgaXMgdGhlIGZpcnN0IGFkZHJlc3Mgb3V0c2lkZSB0aGUgdXNlciBy
YW5nZS4KLSAqIFRoZXJlIGFyZSBhIGZldyBjb25zdHJhaW50cyB0aGF0IGRldGVybWluZSB0aGlz
OgotICoKLSAqIE9uIEludGVsIENQVXMsIGlmIGEgU1lTQ0FMTCBpbnN0cnVjdGlvbiBpcyBhdCB0
aGUgaGlnaGVzdCBjYW5vbmljYWwKLSAqIGFkZHJlc3MsIHRoZW4gdGhhdCBzeXNjYWxsIHdpbGwg
ZW50ZXIgdGhlIGtlcm5lbCB3aXRoIGEKLSAqIG5vbi1jYW5vbmljYWwgcmV0dXJuIGFkZHJlc3Ms
IGFuZCBTWVNSRVQgd2lsbCBleHBsb2RlIGRhbmdlcm91c2x5LgotICogV2UgYXZvaWQgdGhpcyBw
YXJ0aWN1bGFyIHByb2JsZW0gYnkgcHJldmVudGluZyBhbnl0aGluZyBleGVjdXRhYmxlCi0gKiBm
cm9tIGJlaW5nIG1hcHBlZCBhdCB0aGUgbWF4aW11bSBjYW5vbmljYWwgYWRkcmVzcy4KLSAqCi0g
KiBPbiBBTUQgQ1BVcyBpbiB0aGUgUnl6ZW4gZmFtaWx5LCB0aGVyZSdzIGEgbmFzdHkgYnVnIGlu
IHdoaWNoIHRoZQotICogQ1BVcyBtYWxmdW5jdGlvbiBpZiB0aGV5IGV4ZWN1dGUgY29kZSBmcm9t
IHRoZSBoaWdoZXN0IGNhbm9uaWNhbCBwYWdlLgotICogVGhleSdsbCBzcGVjdWxhdGUgcmlnaHQg
b2ZmIHRoZSBlbmQgb2YgdGhlIGNhbm9uaWNhbCBzcGFjZSwgYW5kCi0gKiBiYWQgdGhpbmdzIGhh
cHBlbi4gIFRoaXMgaXMgd29ya2VkIGFyb3VuZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlCi0gKiBJ
bnRlbCBwcm9ibGVtLgotICoKLSAqIFdpdGggcGFnZSB0YWJsZSBpc29sYXRpb24gZW5hYmxlZCwg
d2UgbWFwIHRoZSBMRFQgaW4gLi4uIFtzdGF5IHR1bmVkXQotICovCi0jZGVmaW5lIFRBU0tfU0la
RV9NQVgJKChfQUMoMSxVTCkgPDwgX19WSVJUVUFMX01BU0tfU0hJRlQpIC0gUEFHRV9TSVpFKQot
Ci0jZGVmaW5lIERFRkFVTFRfTUFQX1dJTkRPVwkoKDFVTCA8PCA0NykgLSBQQUdFX1NJWkUpCi0K
LS8qIFRoaXMgZGVjaWRlcyB3aGVyZSB0aGUga2VybmVsIHdpbGwgc2VhcmNoIGZvciBhIGZyZWUg
Y2h1bmsgb2Ygdm0KLSAqIHNwYWNlIGR1cmluZyBtbWFwJ3MuCi0gKi8KLSNkZWZpbmUgSUEzMl9Q
QUdFX09GRlNFVAkoKGN1cnJlbnQtPnBlcnNvbmFsaXR5ICYgQUREUl9MSU1JVF8zR0IpID8gXAot
CQkJCQkweGMwMDAwMDAwIDogMHhGRkZGZTAwMCkKLQotI2RlZmluZSBUQVNLX1NJWkVfTE9XCQko
dGVzdF90aHJlYWRfZmxhZyhUSUZfQUREUjMyKSA/IFwKLQkJCQkJSUEzMl9QQUdFX09GRlNFVCA6
IERFRkFVTFRfTUFQX1dJTkRPVykKLSNkZWZpbmUgVEFTS19TSVpFCQkodGVzdF90aHJlYWRfZmxh
ZyhUSUZfQUREUjMyKSA/IFwKLQkJCQkJSUEzMl9QQUdFX09GRlNFVCA6IFRBU0tfU0laRV9NQVgp
Ci0jZGVmaW5lIFRBU0tfU0laRV9PRihjaGlsZCkJKCh0ZXN0X3Rza190aHJlYWRfZmxhZyhjaGls
ZCwgVElGX0FERFIzMikpID8gXAotCQkJCQlJQTMyX1BBR0VfT0ZGU0VUIDogVEFTS19TSVpFX01B
WCkKLQotI2RlZmluZSBTVEFDS19UT1AJCVRBU0tfU0laRV9MT1cKLSNkZWZpbmUgU1RBQ0tfVE9Q
X01BWAkJVEFTS19TSVpFX01BWAotCiAvKgogICogTWF4aW11bSBrZXJuZWwgaW1hZ2Ugc2l6ZSBp
cyBsaW1pdGVkIHRvIDEgR2lCLCBkdWUgdG8gdGhlIGZpeG1hcCBsaXZpbmcKICAqIGluIHRoZSBu
ZXh0IDEgR2lCIChzZWUgbGV2ZWwyX2tlcm5lbF9wZ3QgaW4gYXJjaC94ODYva2VybmVsL2hlYWRf
NjQuUykuCmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wcm9jZXNzb3IuaCBiL2Fy
Y2gveDg2L2luY2x1ZGUvYXNtL3Byb2Nlc3Nvci5oCmluZGV4IDgyYTA4YjU4NTgxOC4uNWFjNTA3
NTg2NzY5IDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wcm9jZXNzb3IuaAorKysg
Yi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wcm9jZXNzb3IuaApAQCAtNDgyLDYgKzQ4MiwxMCBAQCBl
eHRlcm4gdW5zaWduZWQgaW50IGZwdV91c2VyX3hzdGF0ZV9zaXplOwogCiBzdHJ1Y3QgcGVyZl9l
dmVudDsKIAordHlwZWRlZiBzdHJ1Y3QgeworCXVuc2lnbmVkIGxvbmcJCXNlZzsKK30gbW1fc2Vn
bWVudF90OworCiBzdHJ1Y3QgdGhyZWFkX3N0cnVjdCB7CiAJLyogQ2FjaGVkIFRMUyBkZXNjcmlw
dG9yczogKi8KIAlzdHJ1Y3QgZGVzY19zdHJ1Y3QJdGxzX2FycmF5W0dEVF9FTlRSWV9UTFNfRU5U
UklFU107CkBAIC01MzQsNiArNTM4LDggQEAgc3RydWN0IHRocmVhZF9zdHJ1Y3QgewogCSAqLwog
CXVuc2lnbmVkIGxvbmcJCWlvcGxfZW11bDsKIAorCW1tX3NlZ21lbnRfdAkJYWRkcl9saW1pdDsK
KwogCXVuc2lnbmVkIGludAkJc2lnX29uX3VhY2Nlc3NfZXJyOjE7CiAKIAkvKiBGbG9hdGluZyBw
b2ludCBhbmQgZXh0ZW5kZWQgcHJvY2Vzc29yIHN0YXRlICovCkBAIC03NzcsMTUgKzc4Myw2NyBA
QCBzdGF0aWMgaW5saW5lIHZvaWQgc3Bpbl9sb2NrX3ByZWZldGNoKGNvbnN0IHZvaWQgKngpCiB9
KQogCiAjaWZkZWYgQ09ORklHX1g4Nl8zMgorLyoKKyAqIFVzZXIgc3BhY2UgcHJvY2VzcyBzaXpl
OiAzR0IgKGRlZmF1bHQpLgorICovCisjZGVmaW5lIElBMzJfUEFHRV9PRkZTRVQJUEFHRV9PRkZT
RVQKKyNkZWZpbmUgVEFTS19TSVpFCQlQQUdFX09GRlNFVAorI2RlZmluZSBUQVNLX1NJWkVfTE9X
CQlUQVNLX1NJWkUKKyNkZWZpbmUgVEFTS19TSVpFX01BWAkJVEFTS19TSVpFCisjZGVmaW5lIERF
RkFVTFRfTUFQX1dJTkRPVwlUQVNLX1NJWkUKKyNkZWZpbmUgU1RBQ0tfVE9QCQlUQVNLX1NJWkUK
KyNkZWZpbmUgU1RBQ0tfVE9QX01BWAkJU1RBQ0tfVE9QCisKICNkZWZpbmUgSU5JVF9USFJFQUQg
IHsJCQkJCQkJICBcCiAJLnNwMAkJCT0gVE9QX09GX0lOSVRfU1RBQ0ssCQkJICBcCiAJLnN5c2Vu
dGVyX2NzCQk9IF9fS0VSTkVMX0NTLAkJCQkgIFwKKwkuYWRkcl9saW1pdAkJPSBLRVJORUxfRFMs
CQkJCSAgXAogfQogCiAjZGVmaW5lIEtTVEtfRVNQKHRhc2spCQkodGFza19wdF9yZWdzKHRhc2sp
LT5zcCkKIAogI2Vsc2UKLSNkZWZpbmUgSU5JVF9USFJFQUQgeyB9CisvKgorICogVXNlciBzcGFj
ZSBwcm9jZXNzIHNpemUuICBUaGlzIGlzIHRoZSBmaXJzdCBhZGRyZXNzIG91dHNpZGUgdGhlIHVz
ZXIgcmFuZ2UuCisgKiBUaGVyZSBhcmUgYSBmZXcgY29uc3RyYWludHMgdGhhdCBkZXRlcm1pbmUg
dGhpczoKKyAqCisgKiBPbiBJbnRlbCBDUFVzLCBpZiBhIFNZU0NBTEwgaW5zdHJ1Y3Rpb24gaXMg
YXQgdGhlIGhpZ2hlc3QgY2Fub25pY2FsCisgKiBhZGRyZXNzLCB0aGVuIHRoYXQgc3lzY2FsbCB3
aWxsIGVudGVyIHRoZSBrZXJuZWwgd2l0aCBhCisgKiBub24tY2Fub25pY2FsIHJldHVybiBhZGRy
ZXNzLCBhbmQgU1lTUkVUIHdpbGwgZXhwbG9kZSBkYW5nZXJvdXNseS4KKyAqIFdlIGF2b2lkIHRo
aXMgcGFydGljdWxhciBwcm9ibGVtIGJ5IHByZXZlbnRpbmcgYW55dGhpbmcgZXhlY3V0YWJsZQor
ICogZnJvbSBiZWluZyBtYXBwZWQgYXQgdGhlIG1heGltdW0gY2Fub25pY2FsIGFkZHJlc3MuCisg
KgorICogT24gQU1EIENQVXMgaW4gdGhlIFJ5emVuIGZhbWlseSwgdGhlcmUncyBhIG5hc3R5IGJ1
ZyBpbiB3aGljaCB0aGUKKyAqIENQVXMgbWFsZnVuY3Rpb24gaWYgdGhleSBleGVjdXRlIGNvZGUg
ZnJvbSB0aGUgaGlnaGVzdCBjYW5vbmljYWwgcGFnZS4KKyAqIFRoZXknbGwgc3BlY3VsYXRlIHJp
Z2h0IG9mZiB0aGUgZW5kIG9mIHRoZSBjYW5vbmljYWwgc3BhY2UsIGFuZAorICogYmFkIHRoaW5n
cyBoYXBwZW4uICBUaGlzIGlzIHdvcmtlZCBhcm91bmQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZQor
ICogSW50ZWwgcHJvYmxlbS4KKyAqCisgKiBXaXRoIHBhZ2UgdGFibGUgaXNvbGF0aW9uIGVuYWJs
ZWQsIHdlIG1hcCB0aGUgTERUIGluIC4uLiBbc3RheSB0dW5lZF0KKyAqLworI2RlZmluZSBUQVNL
X1NJWkVfTUFYCSgoMVVMIDw8IF9fVklSVFVBTF9NQVNLX1NISUZUKSAtIFBBR0VfU0laRSkKKwor
I2RlZmluZSBERUZBVUxUX01BUF9XSU5ET1cJKCgxVUwgPDwgNDcpIC0gUEFHRV9TSVpFKQorCisv
KiBUaGlzIGRlY2lkZXMgd2hlcmUgdGhlIGtlcm5lbCB3aWxsIHNlYXJjaCBmb3IgYSBmcmVlIGNo
dW5rIG9mIHZtCisgKiBzcGFjZSBkdXJpbmcgbW1hcCdzLgorICovCisjZGVmaW5lIElBMzJfUEFH
RV9PRkZTRVQJKChjdXJyZW50LT5wZXJzb25hbGl0eSAmIEFERFJfTElNSVRfM0dCKSA/IFwKKwkJ
CQkJMHhjMDAwMDAwMCA6IDB4RkZGRmUwMDApCisKKyNkZWZpbmUgVEFTS19TSVpFX0xPVwkJKHRl
c3RfdGhyZWFkX2ZsYWcoVElGX0FERFIzMikgPyBcCisJCQkJCUlBMzJfUEFHRV9PRkZTRVQgOiBE
RUZBVUxUX01BUF9XSU5ET1cpCisjZGVmaW5lIFRBU0tfU0laRQkJKHRlc3RfdGhyZWFkX2ZsYWco
VElGX0FERFIzMikgPyBcCisJCQkJCUlBMzJfUEFHRV9PRkZTRVQgOiBUQVNLX1NJWkVfTUFYKQor
I2RlZmluZSBUQVNLX1NJWkVfT0YoY2hpbGQpCSgodGVzdF90c2tfdGhyZWFkX2ZsYWcoY2hpbGQs
IFRJRl9BRERSMzIpKSA/IFwKKwkJCQkJSUEzMl9QQUdFX09GRlNFVCA6IFRBU0tfU0laRV9NQVgp
CisKKyNkZWZpbmUgU1RBQ0tfVE9QCQlUQVNLX1NJWkVfTE9XCisjZGVmaW5lIFNUQUNLX1RPUF9N
QVgJCVRBU0tfU0laRV9NQVgKKworI2RlZmluZSBJTklUX1RIUkVBRCAgewkJCQkJCVwKKwkuYWRk
cl9saW1pdAkJPSBLRVJORUxfRFMsCQkJXAorfQogCiBleHRlcm4gdW5zaWduZWQgbG9uZyBLU1RL
X0VTUChzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRhc2spOwogCmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9p
bmNsdWRlL2FzbS90aHJlYWRfaW5mby5oIGIvYXJjaC94ODYvaW5jbHVkZS9hc20vdGhyZWFkX2lu
Zm8uaAppbmRleCA0NDczM2E0YmZjNDIuLjI2NzcwMWFlM2Q4NiAxMDA2NDQKLS0tIGEvYXJjaC94
ODYvaW5jbHVkZS9hc20vdGhyZWFkX2luZm8uaAorKysgYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS90
aHJlYWRfaW5mby5oCkBAIC0xMDIsNiArMTAyLDcgQEAgc3RydWN0IHRocmVhZF9pbmZvIHsKICNk
ZWZpbmUgVElGX1NZU0NBTExfVFJBQ0VQT0lOVAkyOAkvKiBzeXNjYWxsIHRyYWNlcG9pbnQgaW5z
dHJ1bWVudGF0aW9uICovCiAjZGVmaW5lIFRJRl9BRERSMzIJCTI5CS8qIDMyLWJpdCBhZGRyZXNz
IHNwYWNlIG9uIDY0IGJpdHMgKi8KICNkZWZpbmUgVElGX1gzMgkJCTMwCS8qIDMyLWJpdCBuYXRp
dmUgeDg2LTY0IGJpbmFyeSAqLworI2RlZmluZSBUSUZfRlNDSEVDSwkJMzEJLyogQ2hlY2sgRlMg
aXMgVVNFUl9EUyBvbiByZXR1cm4gKi8KIAogI2RlZmluZSBfVElGX1NZU0NBTExfVFJBQ0UJKDEg
PDwgVElGX1NZU0NBTExfVFJBQ0UpCiAjZGVmaW5lIF9USUZfTk9USUZZX1JFU1VNRQkoMSA8PCBU
SUZfTk9USUZZX1JFU1VNRSkKQEAgLTEzMCw2ICsxMzEsNyBAQCBzdHJ1Y3QgdGhyZWFkX2luZm8g
ewogI2RlZmluZSBfVElGX1NZU0NBTExfVFJBQ0VQT0lOVAkoMSA8PCBUSUZfU1lTQ0FMTF9UUkFD
RVBPSU5UKQogI2RlZmluZSBfVElGX0FERFIzMgkJKDEgPDwgVElGX0FERFIzMikKICNkZWZpbmUg
X1RJRl9YMzIJCSgxIDw8IFRJRl9YMzIpCisjZGVmaW5lIF9USUZfRlNDSEVDSwkJKDEgPDwgVElG
X0ZTQ0hFQ0spCiAKIC8qIGZsYWdzIHRvIGNoZWNrIGluIF9fc3dpdGNoX3RvKCkgKi8KICNkZWZp
bmUgX1RJRl9XT1JLX0NUWFNXX0JBU0UJCQkJCVwKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2luY2x1
ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCBj
OWZhN2JlM2RmODIuLmEyYzkzNzI0NTc1MyAxMDA2NDQKLS0tIGEvYXJjaC94ODYvaW5jbHVkZS9h
c20vdWFjY2Vzcy5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMTIs
NiArMTIsMzAgQEAKICNpbmNsdWRlIDxhc20vc21hcC5oPgogI2luY2x1ZGUgPGFzbS9leHRhYmxl
Lmg+CiAKKy8qCisgKiBUaGUgZnMgdmFsdWUgZGV0ZXJtaW5lcyB3aGV0aGVyIGFyZ3VtZW50IHZh
bGlkaXR5IGNoZWNraW5nIHNob3VsZCBiZQorICogcGVyZm9ybWVkIG9yIG5vdC4gIElmIGdldF9m
cygpID09IFVTRVJfRFMsIGNoZWNraW5nIGlzIHBlcmZvcm1lZCwgd2l0aAorICogZ2V0X2ZzKCkg
PT0gS0VSTkVMX0RTLCBjaGVja2luZyBpcyBieXBhc3NlZC4KKyAqCisgKiBGb3IgaGlzdG9yaWNh
bCByZWFzb25zLCB0aGVzZSBtYWNyb3MgYXJlIGdyb3NzbHkgbWlzbmFtZWQuCisgKi8KKworI2Rl
ZmluZSBNQUtFX01NX1NFRyhzKQkoKG1tX3NlZ21lbnRfdCkgeyAocykgfSkKKworI2RlZmluZSBL
RVJORUxfRFMJTUFLRV9NTV9TRUcoLTFVTCkKKyNkZWZpbmUgVVNFUl9EUyAJTUFLRV9NTV9TRUco
VEFTS19TSVpFX01BWCkKKworI2RlZmluZSBnZXRfZnMoKQkoY3VycmVudC0+dGhyZWFkLmFkZHJf
bGltaXQpCitzdGF0aWMgaW5saW5lIHZvaWQgc2V0X2ZzKG1tX3NlZ21lbnRfdCBmcykKK3sKKwlj
dXJyZW50LT50aHJlYWQuYWRkcl9saW1pdCA9IGZzOworCS8qIE9uIHVzZXItbW9kZSByZXR1cm4s
IGNoZWNrIGZzIGlzIGNvcnJlY3QgKi8KKwlzZXRfdGhyZWFkX2ZsYWcoVElGX0ZTQ0hFQ0spOwor
fQorCisjZGVmaW5lIHVhY2Nlc3Nfa2VybmVsKCkgKGdldF9mcygpLnNlZyA9PSBLRVJORUxfRFMu
c2VnKQorI2RlZmluZSB1c2VyX2FkZHJfbWF4KCkgKGN1cnJlbnQtPnRocmVhZC5hZGRyX2xpbWl0
LnNlZykKKwogLyoKICAqIFRlc3Qgd2hldGhlciBhIGJsb2NrIG9mIG1lbW9yeSBpcyBhIHZhbGlk
IHVzZXIgc3BhY2UgYWRkcmVzcy4KICAqIFJldHVybnMgMCBpZiB0aGUgcmFuZ2UgaXMgdmFsaWQs
IG5vbnplcm8gb3RoZXJ3aXNlLgpAQCAtNjksNyArOTMsNyBAQCBzdGF0aWMgaW5saW5lIGJvb2wg
cGFnZWZhdWx0X2Rpc2FibGVkKHZvaWQpOwogI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkJ
CQkJCVwKICh7CQkJCQkJCQkJXAogCVdBUk5fT05fSU5fSVJRKCk7CQkJCQkJXAotCWxpa2VseSgh
X19yYW5nZV9ub3Rfb2soYWRkciwgc2l6ZSwgVEFTS19TSVpFX01BWCkpOwkJXAorCWxpa2VseSgh
X19yYW5nZV9ub3Rfb2soYWRkciwgc2l6ZSwgdXNlcl9hZGRyX21heCgpKSk7CQlcCiB9KQogCiBl
eHRlcm4gaW50IF9fZ2V0X3VzZXJfMSh2b2lkKTsKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2tlcm5l
bC9hc20tb2Zmc2V0cy5jIGIvYXJjaC94ODYva2VybmVsL2FzbS1vZmZzZXRzLmMKaW5kZXggNzBi
NzE1NGY0YmRkLi4zY2EwN2FkNTUyYWUgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2tlcm5lbC9hc20t
b2Zmc2V0cy5jCisrKyBiL2FyY2gveDg2L2tlcm5lbC9hc20tb2Zmc2V0cy5jCkBAIC0zNyw2ICsz
Nyw5IEBAIHN0YXRpYyB2b2lkIF9fdXNlZCBjb21tb24odm9pZCkKIAlPRkZTRVQoVEFTS19zdGFj
a19jYW5hcnksIHRhc2tfc3RydWN0LCBzdGFja19jYW5hcnkpOwogI2VuZGlmCiAKKwlCTEFOSygp
OworCU9GRlNFVChUQVNLX2FkZHJfbGltaXQsIHRhc2tfc3RydWN0LCB0aHJlYWQuYWRkcl9saW1p
dCk7CisKIAlCTEFOSygpOwogCU9GRlNFVChjcnlwdG9fdGZtX2N0eF9vZmZzZXQsIGNyeXB0b190
Zm0sIF9fY3J0X2N0eCk7CiAKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2xpYi9nZXR1c2VyLlMgYi9h
cmNoL3g4Ni9saWIvZ2V0dXNlci5TCmluZGV4IGZhMWJjMjEwNGIzMi4uMmNkOTAyZTA2MDYyIDEw
MDY0NAotLS0gYS9hcmNoL3g4Ni9saWIvZ2V0dXNlci5TCisrKyBiL2FyY2gveDg2L2xpYi9nZXR1
c2VyLlMKQEAgLTM3LDE5ICszNywxMCBAQAogCiAjZGVmaW5lIEFTTV9CQVJSSUVSX05PU1BFQyBB
TFRFUk5BVElWRSAiIiwgImxmZW5jZSIsIFg4Nl9GRUFUVVJFX0xGRU5DRV9SRFRTQwogCi0jaWZk
ZWYgQ09ORklHX1g4Nl81TEVWRUwKLSNkZWZpbmUgTE9BRF9UQVNLX1NJWkVfTUlOVVNfTihuKSBc
Ci0JQUxURVJOQVRJVkUgX19zdHJpbmdpZnkobW92ICQoKDEgPDwgNDcpIC0gNDA5NiAtIChuKSks
JXJkeCksIFwKLQkJICAgIF9fc3RyaW5naWZ5KG1vdiAkKCgxIDw8IDU2KSAtIDQwOTYgLSAobikp
LCVyZHgpLCBYODZfRkVBVFVSRV9MQTU3Ci0jZWxzZQotI2RlZmluZSBMT0FEX1RBU0tfU0laRV9N
SU5VU19OKG4pIFwKLQltb3YgJChUQVNLX1NJWkVfTUFYIC0gKG4pKSwlX0FTTV9EWAotI2VuZGlm
Ci0KIAkudGV4dAogU1lNX0ZVTkNfU1RBUlQoX19nZXRfdXNlcl8xKQotCUxPQURfVEFTS19TSVpF
X01JTlVTX04oMCkKLQljbXAgJV9BU01fRFgsJV9BU01fQVgKKwltb3YgUEVSX0NQVV9WQVIoY3Vy
cmVudF90YXNrKSwgJV9BU01fRFgKKwljbXAgVEFTS19hZGRyX2xpbWl0KCVfQVNNX0RYKSwlX0FT
TV9BWAogCWphZSBiYWRfZ2V0X3VzZXIKIAlzYmIgJV9BU01fRFgsICVfQVNNX0RYCQkvKiBhcnJh
eV9pbmRleF9tYXNrX25vc3BlYygpICovCiAJYW5kICVfQVNNX0RYLCAlX0FTTV9BWApAQCAtNjIs
MTMgKzUzLDE1IEBAIFNZTV9GVU5DX0VORChfX2dldF91c2VyXzEpCiBFWFBPUlRfU1lNQk9MKF9f
Z2V0X3VzZXJfMSkKIAogU1lNX0ZVTkNfU1RBUlQoX19nZXRfdXNlcl8yKQotCUxPQURfVEFTS19T
SVpFX01JTlVTX04oMSkKLQljbXAgJV9BU01fRFgsJV9BU01fQVgKKwlhZGQgJDEsJV9BU01fQVgK
KwlqYyBiYWRfZ2V0X3VzZXIKKwltb3YgUEVSX0NQVV9WQVIoY3VycmVudF90YXNrKSwgJV9BU01f
RFgKKwljbXAgVEFTS19hZGRyX2xpbWl0KCVfQVNNX0RYKSwlX0FTTV9BWAogCWphZSBiYWRfZ2V0
X3VzZXIKIAlzYmIgJV9BU01fRFgsICVfQVNNX0RYCQkvKiBhcnJheV9pbmRleF9tYXNrX25vc3Bl
YygpICovCiAJYW5kICVfQVNNX0RYLCAlX0FTTV9BWAogCUFTTV9TVEFDCi0yOgltb3Z6d2wgKCVf
QVNNX0FYKSwlZWR4CisyOgltb3Z6d2wgLTEoJV9BU01fQVgpLCVlZHgKIAl4b3IgJWVheCwlZWF4
CiAJQVNNX0NMQUMKIAlyZXQKQEAgLTc2LDEzICs2OSwxNSBAQCBTWU1fRlVOQ19FTkQoX19nZXRf
dXNlcl8yKQogRVhQT1JUX1NZTUJPTChfX2dldF91c2VyXzIpCiAKIFNZTV9GVU5DX1NUQVJUKF9f
Z2V0X3VzZXJfNCkKLQlMT0FEX1RBU0tfU0laRV9NSU5VU19OKDMpCi0JY21wICVfQVNNX0RYLCVf
QVNNX0FYCisJYWRkICQzLCVfQVNNX0FYCisJamMgYmFkX2dldF91c2VyCisJbW92IFBFUl9DUFVf
VkFSKGN1cnJlbnRfdGFzayksICVfQVNNX0RYCisJY21wIFRBU0tfYWRkcl9saW1pdCglX0FTTV9E
WCksJV9BU01fQVgKIAlqYWUgYmFkX2dldF91c2VyCiAJc2JiICVfQVNNX0RYLCAlX0FTTV9EWAkJ
LyogYXJyYXlfaW5kZXhfbWFza19ub3NwZWMoKSAqLwogCWFuZCAlX0FTTV9EWCwgJV9BU01fQVgK
IAlBU01fU1RBQwotMzoJbW92bCAoJV9BU01fQVgpLCVlZHgKKzM6CW1vdmwgLTMoJV9BU01fQVgp
LCVlZHgKIAl4b3IgJWVheCwlZWF4CiAJQVNNX0NMQUMKIAlyZXQKQEAgLTkxLDI1ICs4NiwyOSBA
QCBFWFBPUlRfU1lNQk9MKF9fZ2V0X3VzZXJfNCkKIAogU1lNX0ZVTkNfU1RBUlQoX19nZXRfdXNl
cl84KQogI2lmZGVmIENPTkZJR19YODZfNjQKLQlMT0FEX1RBU0tfU0laRV9NSU5VU19OKDcpCi0J
Y21wICVfQVNNX0RYLCVfQVNNX0FYCisJYWRkICQ3LCVfQVNNX0FYCisJamMgYmFkX2dldF91c2Vy
CisJbW92IFBFUl9DUFVfVkFSKGN1cnJlbnRfdGFzayksICVfQVNNX0RYCisJY21wIFRBU0tfYWRk
cl9saW1pdCglX0FTTV9EWCksJV9BU01fQVgKIAlqYWUgYmFkX2dldF91c2VyCiAJc2JiICVfQVNN
X0RYLCAlX0FTTV9EWAkJLyogYXJyYXlfaW5kZXhfbWFza19ub3NwZWMoKSAqLwogCWFuZCAlX0FT
TV9EWCwgJV9BU01fQVgKIAlBU01fU1RBQwotNDoJbW92cSAoJV9BU01fQVgpLCVyZHgKKzQ6CW1v
dnEgLTcoJV9BU01fQVgpLCVyZHgKIAl4b3IgJWVheCwlZWF4CiAJQVNNX0NMQUMKIAlyZXQKICNl
bHNlCi0JTE9BRF9UQVNLX1NJWkVfTUlOVVNfTig3KQotCWNtcCAlX0FTTV9EWCwlX0FTTV9BWAor
CWFkZCAkNywlX0FTTV9BWAorCWpjIGJhZF9nZXRfdXNlcl84CisJbW92IFBFUl9DUFVfVkFSKGN1
cnJlbnRfdGFzayksICVfQVNNX0RYCisJY21wIFRBU0tfYWRkcl9saW1pdCglX0FTTV9EWCksJV9B
U01fQVgKIAlqYWUgYmFkX2dldF91c2VyXzgKIAlzYmIgJV9BU01fRFgsICVfQVNNX0RYCQkvKiBh
cnJheV9pbmRleF9tYXNrX25vc3BlYygpICovCiAJYW5kICVfQVNNX0RYLCAlX0FTTV9BWAogCUFT
TV9TVEFDCi00Ogltb3ZsICglX0FTTV9BWCksJWVkeAotNToJbW92bCA0KCVfQVNNX0FYKSwlZWN4
Cis0Ogltb3ZsIC03KCVfQVNNX0FYKSwlZWR4Cis1Ogltb3ZsIC0zKCVfQVNNX0FYKSwlZWN4CiAJ
eG9yICVlYXgsJWVheAogCUFTTV9DTEFDCiAJcmV0CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9saWIv
cHV0dXNlci5TIGIvYXJjaC94ODYvbGliL3B1dHVzZXIuUwppbmRleCAwZWEzNDRjNWVhNDMuLmIz
NGExNzc2M2YyOCAxMDA2NDQKLS0tIGEvYXJjaC94ODYvbGliL3B1dHVzZXIuUworKysgYi9hcmNo
L3g4Ni9saWIvcHV0dXNlci5TCkBAIC0zMywxOSArMzMsMTIgQEAKICAqIGFzIHRoZXkgZ2V0IGNh
bGxlZCBmcm9tIHdpdGhpbiBpbmxpbmUgYXNzZW1ibHkuCiAgKi8KIAotI2lmZGVmIENPTkZJR19Y
ODZfNUxFVkVMCi0jZGVmaW5lIExPQURfVEFTS19TSVpFX01JTlVTX04obikgXAotCUFMVEVSTkFU
SVZFIF9fc3RyaW5naWZ5KG1vdiAkKCgxIDw8IDQ3KSAtIDQwOTYgLSAobikpLCVyYngpLCBcCi0J
CSAgICBfX3N0cmluZ2lmeShtb3YgJCgoMSA8PCA1NikgLSA0MDk2IC0gKG4pKSwlcmJ4KSwgWDg2
X0ZFQVRVUkVfTEE1NwotI2Vsc2UKLSNkZWZpbmUgTE9BRF9UQVNLX1NJWkVfTUlOVVNfTihuKSBc
Ci0JbW92ICQoVEFTS19TSVpFX01BWCAtIChuKSksJV9BU01fQlgKLSNlbmRpZgorI2RlZmluZSBF
TlRFUgltb3YgUEVSX0NQVV9WQVIoY3VycmVudF90YXNrKSwgJV9BU01fQlgKIAogLnRleHQKIFNZ
TV9GVU5DX1NUQVJUKF9fcHV0X3VzZXJfMSkKLQlMT0FEX1RBU0tfU0laRV9NSU5VU19OKDApCi0J
Y21wICVfQVNNX0JYLCVfQVNNX0NYCisJRU5URVIKKwljbXAgVEFTS19hZGRyX2xpbWl0KCVfQVNN
X0JYKSwlX0FTTV9DWAogCWphZSAuTGJhZF9wdXRfdXNlcgogU1lNX0lOTkVSX0xBQkVMKF9fcHV0
X3VzZXJfbm9jaGVja18xLCBTWU1fTF9HTE9CQUwpCiAJQVNNX1NUQUMKQEAgLTU4LDcgKzUxLDkg
QEAgRVhQT1JUX1NZTUJPTChfX3B1dF91c2VyXzEpCiBFWFBPUlRfU1lNQk9MKF9fcHV0X3VzZXJf
bm9jaGVja18xKQogCiBTWU1fRlVOQ19TVEFSVChfX3B1dF91c2VyXzIpCi0JTE9BRF9UQVNLX1NJ
WkVfTUlOVVNfTigxKQorCUVOVEVSCisJbW92IFRBU0tfYWRkcl9saW1pdCglX0FTTV9CWCksJV9B
U01fQlgKKwlzdWIgJDEsJV9BU01fQlgKIAljbXAgJV9BU01fQlgsJV9BU01fQ1gKIAlqYWUgLkxi
YWRfcHV0X3VzZXIKIFNZTV9JTk5FUl9MQUJFTChfX3B1dF91c2VyX25vY2hlY2tfMiwgU1lNX0xf
R0xPQkFMKQpAQCAtNzIsNyArNjcsOSBAQCBFWFBPUlRfU1lNQk9MKF9fcHV0X3VzZXJfMikKIEVY
UE9SVF9TWU1CT0woX19wdXRfdXNlcl9ub2NoZWNrXzIpCiAKIFNZTV9GVU5DX1NUQVJUKF9fcHV0
X3VzZXJfNCkKLQlMT0FEX1RBU0tfU0laRV9NSU5VU19OKDMpCisJRU5URVIKKwltb3YgVEFTS19h
ZGRyX2xpbWl0KCVfQVNNX0JYKSwlX0FTTV9CWAorCXN1YiAkMywlX0FTTV9CWAogCWNtcCAlX0FT
TV9CWCwlX0FTTV9DWAogCWphZSAuTGJhZF9wdXRfdXNlcgogU1lNX0lOTkVSX0xBQkVMKF9fcHV0
X3VzZXJfbm9jaGVja180LCBTWU1fTF9HTE9CQUwpCkBAIC04Niw3ICs4Myw5IEBAIEVYUE9SVF9T
WU1CT0woX19wdXRfdXNlcl80KQogRVhQT1JUX1NZTUJPTChfX3B1dF91c2VyX25vY2hlY2tfNCkK
IAogU1lNX0ZVTkNfU1RBUlQoX19wdXRfdXNlcl84KQotCUxPQURfVEFTS19TSVpFX01JTlVTX04o
NykKKwlFTlRFUgorCW1vdiBUQVNLX2FkZHJfbGltaXQoJV9BU01fQlgpLCVfQVNNX0JYCisJc3Vi
ICQ3LCVfQVNNX0JYCiAJY21wICVfQVNNX0JYLCVfQVNNX0NYCiAJamFlIC5MYmFkX3B1dF91c2Vy
CiBTWU1fSU5ORVJfTEFCRUwoX19wdXRfdXNlcl9ub2NoZWNrXzgsIFNZTV9MX0dMT0JBTCkKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvbWlzYy9sa2R0bS9idWdzLmMgYi9kcml2ZXJzL21pc2MvbGtkdG0v
YnVncy5jCmluZGV4IGEwNjc1ZDQxNTRkMi4uNGRmYmZkNTFiZGY3IDEwMDY0NAotLS0gYS9kcml2
ZXJzL21pc2MvbGtkdG0vYnVncy5jCisrKyBiL2RyaXZlcnMvbWlzYy9sa2R0bS9idWdzLmMKQEAg
LTMxMiw2ICszMTIsMTYgQEAgdm9pZCBsa2R0bV9DT1JSVVBUX0xJU1RfREVMKHZvaWQpCiAJCXBy
X2VycigibGlzdF9kZWwoKSBjb3JydXB0aW9uIG5vdCBkZXRlY3RlZCFcbiIpOwogfQogCisvKiBU
ZXN0IGlmIHVuYmFsYW5jZWQgc2V0X2ZzKEtFUk5FTF9EUykvc2V0X2ZzKFVTRVJfRFMpIGNoZWNr
IGV4aXN0cy4gKi8KK3ZvaWQgbGtkdG1fQ09SUlVQVF9VU0VSX0RTKHZvaWQpCit7CisJcHJfaW5m
bygic2V0dGluZyBiYWQgdGFzayBzaXplIGxpbWl0XG4iKTsKKwlzZXRfZnMoS0VSTkVMX0RTKTsK
KworCS8qIE1ha2Ugc3VyZSB3ZSBkbyBub3Qga2VlcCBydW5uaW5nIHdpdGggYSBLRVJORUxfRFMh
ICovCisJZm9yY2Vfc2lnKFNJR0tJTEwpOworfQorCiAvKiBUZXN0IHRoYXQgVk1BUF9TVEFDSyBp
cyBhY3R1YWxseSBhbGxvY2F0aW5nIHdpdGggYSBsZWFkaW5nIGd1YXJkIHBhZ2UgKi8KIHZvaWQg
bGtkdG1fU1RBQ0tfR1VBUkRfUEFHRV9MRUFESU5HKHZvaWQpCiB7CmRpZmYgLS1naXQgYS9kcml2
ZXJzL21pc2MvbGtkdG0vY29yZS5jIGIvZHJpdmVycy9taXNjL2xrZHRtL2NvcmUuYwppbmRleCA5
NzgwM2YyMTNkOWQuLmE1ZTM0NGRmOTE2NiAxMDA2NDQKLS0tIGEvZHJpdmVycy9taXNjL2xrZHRt
L2NvcmUuYworKysgYi9kcml2ZXJzL21pc2MvbGtkdG0vY29yZS5jCkBAIC0xMTIsNiArMTEyLDcg
QEAgc3RhdGljIGNvbnN0IHN0cnVjdCBjcmFzaHR5cGUgY3Jhc2h0eXBlc1tdID0gewogCUNSQVNI
VFlQRShDT1JSVVBUX1NUQUNLX1NUUk9ORyksCiAJQ1JBU0hUWVBFKENPUlJVUFRfTElTVF9BREQp
LAogCUNSQVNIVFlQRShDT1JSVVBUX0xJU1RfREVMKSwKKwlDUkFTSFRZUEUoQ09SUlVQVF9VU0VS
X0RTKSwKIAlDUkFTSFRZUEUoU1RBQ0tfR1VBUkRfUEFHRV9MRUFESU5HKSwKIAlDUkFTSFRZUEUo
U1RBQ0tfR1VBUkRfUEFHRV9UUkFJTElORyksCiAJQ1JBU0hUWVBFKFVOU0VUX1NNRVApLApAQCAt
MTcxLDYgKzE3Miw3IEBAIHN0YXRpYyBjb25zdCBzdHJ1Y3QgY3Jhc2h0eXBlIGNyYXNodHlwZXNb
XSA9IHsKIAlDUkFTSFRZUEUoVVNFUkNPUFlfU1RBQ0tfRlJBTUVfRlJPTSksCiAJQ1JBU0hUWVBF
KFVTRVJDT1BZX1NUQUNLX0JFWU9ORCksCiAJQ1JBU0hUWVBFKFVTRVJDT1BZX0tFUk5FTCksCisJ
Q1JBU0hUWVBFKFVTRVJDT1BZX0tFUk5FTF9EUyksCiAJQ1JBU0hUWVBFKFNUQUNLTEVBS19FUkFT
SU5HKSwKIAlDUkFTSFRZUEUoQ0ZJX0ZPUldBUkRfUFJPVE8pLAogI2lmZGVmIENPTkZJR19YODZf
MzIKZGlmZiAtLWdpdCBhL2RyaXZlcnMvbWlzYy9sa2R0bS9sa2R0bS5oIGIvZHJpdmVycy9taXNj
L2xrZHRtL2xrZHRtLmgKaW5kZXggNmRlYzRjOWI0NDJmLi44ODc4NTM4YjJjMTMgMTAwNjQ0Ci0t
LSBhL2RyaXZlcnMvbWlzYy9sa2R0bS9sa2R0bS5oCisrKyBiL2RyaXZlcnMvbWlzYy9sa2R0bS9s
a2R0bS5oCkBAIC0yNyw2ICsyNyw3IEBAIHZvaWQgbGtkdG1fT1ZFUkZMT1dfVU5TSUdORUQodm9p
ZCk7CiB2b2lkIGxrZHRtX0FSUkFZX0JPVU5EUyh2b2lkKTsKIHZvaWQgbGtkdG1fQ09SUlVQVF9M
SVNUX0FERCh2b2lkKTsKIHZvaWQgbGtkdG1fQ09SUlVQVF9MSVNUX0RFTCh2b2lkKTsKK3ZvaWQg
bGtkdG1fQ09SUlVQVF9VU0VSX0RTKHZvaWQpOwogdm9pZCBsa2R0bV9TVEFDS19HVUFSRF9QQUdF
X0xFQURJTkcodm9pZCk7CiB2b2lkIGxrZHRtX1NUQUNLX0dVQVJEX1BBR0VfVFJBSUxJTkcodm9p
ZCk7CiB2b2lkIGxrZHRtX1VOU0VUX1NNRVAodm9pZCk7CkBAIC05NSw2ICs5Niw3IEBAIHZvaWQg
bGtkdG1fVVNFUkNPUFlfU1RBQ0tfRlJBTUVfVE8odm9pZCk7CiB2b2lkIGxrZHRtX1VTRVJDT1BZ
X1NUQUNLX0ZSQU1FX0ZST00odm9pZCk7CiB2b2lkIGxrZHRtX1VTRVJDT1BZX1NUQUNLX0JFWU9O
RCh2b2lkKTsKIHZvaWQgbGtkdG1fVVNFUkNPUFlfS0VSTkVMKHZvaWQpOwordm9pZCBsa2R0bV9V
U0VSQ09QWV9LRVJORUxfRFModm9pZCk7CiAKIC8qIGxrZHRtX3N0YWNrbGVhay5jICovCiB2b2lk
IGxrZHRtX1NUQUNLTEVBS19FUkFTSU5HKHZvaWQpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9taXNj
L2xrZHRtL3VzZXJjb3B5LmMgYi9kcml2ZXJzL21pc2MvbGtkdG0vdXNlcmNvcHkuYwppbmRleCAx
MDllOGQ0MzAyYzEuLmI4MzMzNjdhNDVkMCAxMDA2NDQKLS0tIGEvZHJpdmVycy9taXNjL2xrZHRt
L3VzZXJjb3B5LmMKKysrIGIvZHJpdmVycy9taXNjL2xrZHRtL3VzZXJjb3B5LmMKQEAgLTMyNSw2
ICszMjUsMjEgQEAgdm9pZCBsa2R0bV9VU0VSQ09QWV9LRVJORUwodm9pZCkKIAl2bV9tdW5tYXAo
dXNlcl9hZGRyLCBQQUdFX1NJWkUpOwogfQogCit2b2lkIGxrZHRtX1VTRVJDT1BZX0tFUk5FTF9E
Uyh2b2lkKQoreworCWNoYXIgX191c2VyICp1c2VyX3B0ciA9CisJCShjaGFyIF9fdXNlciAqKSgw
eEZVTCA8PCAoc2l6ZW9mKHVuc2lnbmVkIGxvbmcpICogOCAtIDQpKTsKKwltbV9zZWdtZW50X3Qg
b2xkX2ZzID0gZ2V0X2ZzKCk7CisJY2hhciBidWZbMTBdID0gezB9OworCisJcHJfaW5mbygiYXR0
ZW1wdGluZyBjb3B5X3RvX3VzZXIoKSB0byBub25jYW5vbmljYWwgYWRkcmVzczogJXB4XG4iLAor
CQl1c2VyX3B0cik7CisJc2V0X2ZzKEtFUk5FTF9EUyk7CisJaWYgKGNvcHlfdG9fdXNlcih1c2Vy
X3B0ciwgYnVmLCBzaXplb2YoYnVmKSkgPT0gMCkKKwkJcHJfZXJyKCJjb3B5X3RvX3VzZXIoKSB0
byBub25jYW5vbmljYWwgYWRkcmVzcyBzdWNjZWVkZWQhP1xuIik7CisJc2V0X2ZzKG9sZF9mcyk7
Cit9CisKIHZvaWQgX19pbml0IGxrZHRtX3VzZXJjb3B5X2luaXQodm9pZCkKIHsKIAkvKiBQcmVw
YXJlIGNhY2hlIHRoYXQgbGFja3MgU0xBQl9VU0VSQ09QWSBmbGFnLiAqLwpkaWZmIC0tZ2l0IGEv
ZnMvcHJvYy9jcHVpbmZvLmMgYi9mcy9wcm9jL2NwdWluZm8uYwppbmRleCA0MTk3NjBmZDc3YmQu
LmQwOTg5YTQ0M2M3NyAxMDA2NDQKLS0tIGEvZnMvcHJvYy9jcHVpbmZvLmMKKysrIGIvZnMvcHJv
Yy9jcHVpbmZvLmMKQEAgLTE5LDcgKzE5LDcgQEAgc3RhdGljIGludCBjcHVpbmZvX29wZW4oc3Ry
dWN0IGlub2RlICppbm9kZSwgc3RydWN0IGZpbGUgKmZpbGUpCiBzdGF0aWMgY29uc3Qgc3RydWN0
IHByb2Nfb3BzIGNwdWluZm9fcHJvY19vcHMgPSB7CiAJLnByb2NfZmxhZ3MJPSBQUk9DX0VOVFJZ
X1BFUk1BTkVOVCwKIAkucHJvY19vcGVuCT0gY3B1aW5mb19vcGVuLAotCS5wcm9jX3JlYWRfaXRl
cgk9IHNlcV9yZWFkX2l0ZXIsCisJLnByb2NfcmVhZAk9IHNlcV9yZWFkLAogCS5wcm9jX2xzZWVr
CT0gc2VxX2xzZWVrLAogCS5wcm9jX3JlbGVhc2UJPSBzZXFfcmVsZWFzZSwKIH07CmRpZmYgLS1n
aXQgYS9mcy9wcm9jL2dlbmVyaWMuYyBiL2ZzL3Byb2MvZ2VuZXJpYy5jCmluZGV4IDZjMGEwNWY1
NWQ2Yi4uNjNmZDRhNmMyZGVjIDEwMDY0NAotLS0gYS9mcy9wcm9jL2dlbmVyaWMuYworKysgYi9m
cy9wcm9jL2dlbmVyaWMuYwpAQCAtNjEwLDcgKzYxMCw3IEBAIHN0YXRpYyBpbnQgcHJvY19zZXFf
cmVsZWFzZShzdHJ1Y3QgaW5vZGUgKmlub2RlLCBzdHJ1Y3QgZmlsZSAqZmlsZSkKIHN0YXRpYyBj
b25zdCBzdHJ1Y3QgcHJvY19vcHMgcHJvY19zZXFfb3BzID0gewogCS8qIG5vdCBwZXJtYW5lbnQg
LS0gY2FuIGNhbGwgaW50byBhcmJpdHJhcnkgc2VxX29wZXJhdGlvbnMgKi8KIAkucHJvY19vcGVu
CT0gcHJvY19zZXFfb3BlbiwKLQkucHJvY19yZWFkX2l0ZXIJPSBzZXFfcmVhZF9pdGVyLAorCS5w
cm9jX3JlYWQJPSBzZXFfcmVhZCwKIAkucHJvY19sc2Vlawk9IHNlcV9sc2VlaywKIAkucHJvY19y
ZWxlYXNlCT0gcHJvY19zZXFfcmVsZWFzZSwKIH07CkBAIC02NDEsNyArNjQxLDcgQEAgc3RhdGlj
IGludCBwcm9jX3NpbmdsZV9vcGVuKHN0cnVjdCBpbm9kZSAqaW5vZGUsIHN0cnVjdCBmaWxlICpm
aWxlKQogc3RhdGljIGNvbnN0IHN0cnVjdCBwcm9jX29wcyBwcm9jX3NpbmdsZV9vcHMgPSB7CiAJ
Lyogbm90IHBlcm1hbmVudCAtLSBjYW4gY2FsbCBpbnRvIGFyYml0cmFyeSAtPnNpbmdsZV9zaG93
ICovCiAJLnByb2Nfb3Blbgk9IHByb2Nfc2luZ2xlX29wZW4sCi0JLnByb2NfcmVhZF9pdGVyID0g
c2VxX3JlYWRfaXRlciwKKwkucHJvY19yZWFkCT0gc2VxX3JlYWQsCiAJLnByb2NfbHNlZWsJPSBz
ZXFfbHNlZWssCiAJLnByb2NfcmVsZWFzZQk9IHNpbmdsZV9yZWxlYXNlLAogfTsKZGlmZiAtLWdp
dCBhL2ZzL3Byb2MvaW5vZGUuYyBiL2ZzL3Byb2MvaW5vZGUuYwppbmRleCBiZGU2YjZmNjk4NTIu
LjY4ZTU1NDgzZDZmMyAxMDA2NDQKLS0tIGEvZnMvcHJvYy9pbm9kZS5jCisrKyBiL2ZzL3Byb2Mv
aW5vZGUuYwpAQCAtMjk3LDIxICsyOTcsNiBAQCBzdGF0aWMgbG9mZl90IHByb2NfcmVnX2xsc2Vl
ayhzdHJ1Y3QgZmlsZSAqZmlsZSwgbG9mZl90IG9mZnNldCwgaW50IHdoZW5jZSkKIAlyZXR1cm4g
cnY7CiB9CiAKLXN0YXRpYyBzc2l6ZV90IHByb2NfcmVnX3JlYWRfaXRlcihzdHJ1Y3Qga2lvY2Ig
KmlvY2IsIHN0cnVjdCBpb3ZfaXRlciAqaXRlcikKLXsKLQlzdHJ1Y3QgcHJvY19kaXJfZW50cnkg
KnBkZSA9IFBERShmaWxlX2lub2RlKGlvY2ItPmtpX2ZpbHApKTsKLQlzc2l6ZV90IHJldDsKLQot
CWlmIChwZGVfaXNfcGVybWFuZW50KHBkZSkpCi0JCXJldHVybiBwZGUtPnByb2Nfb3BzLT5wcm9j
X3JlYWRfaXRlcihpb2NiLCBpdGVyKTsKLQotCWlmICghdXNlX3BkZShwZGUpKQotCQlyZXR1cm4g
LUVJTzsKLQlyZXQgPSBwZGUtPnByb2Nfb3BzLT5wcm9jX3JlYWRfaXRlcihpb2NiLCBpdGVyKTsK
LQl1bnVzZV9wZGUocGRlKTsKLQlyZXR1cm4gcmV0OwotfQotCiBzdGF0aWMgc3NpemVfdCBwZGVf
cmVhZChzdHJ1Y3QgcHJvY19kaXJfZW50cnkgKnBkZSwgc3RydWN0IGZpbGUgKmZpbGUsIGNoYXIg
X191c2VyICpidWYsIHNpemVfdCBjb3VudCwgbG9mZl90ICpwcG9zKQogewogCXR5cGVvZl9tZW1i
ZXIoc3RydWN0IHByb2Nfb3BzLCBwcm9jX3JlYWQpIHJlYWQ7CkBAIC01ODcsNTIgKzU3MiwzMiBA
QCBzdGF0aWMgY29uc3Qgc3RydWN0IGZpbGVfb3BlcmF0aW9ucyBwcm9jX3JlZ19maWxlX29wcyA9
IHsKIAkud3JpdGUJCT0gcHJvY19yZWdfd3JpdGUsCiAJLnBvbGwJCT0gcHJvY19yZWdfcG9sbCwK
IAkudW5sb2NrZWRfaW9jdGwJPSBwcm9jX3JlZ191bmxvY2tlZF9pb2N0bCwKKyNpZmRlZiBDT05G
SUdfQ09NUEFUCisJLmNvbXBhdF9pb2N0bAk9IHByb2NfcmVnX2NvbXBhdF9pb2N0bCwKKyNlbmRp
ZgogCS5tbWFwCQk9IHByb2NfcmVnX21tYXAsCiAJLmdldF91bm1hcHBlZF9hcmVhID0gcHJvY19y
ZWdfZ2V0X3VubWFwcGVkX2FyZWEsCiAJLm9wZW4JCT0gcHJvY19yZWdfb3BlbiwKIAkucmVsZWFz
ZQk9IHByb2NfcmVnX3JlbGVhc2UsCiB9OwogCi1zdGF0aWMgY29uc3Qgc3RydWN0IGZpbGVfb3Bl
cmF0aW9ucyBwcm9jX2l0ZXJfZmlsZV9vcHMgPSB7Ci0JLmxsc2VlawkJPSBwcm9jX3JlZ19sbHNl
ZWssCi0JLnJlYWRfaXRlcgk9IHByb2NfcmVnX3JlYWRfaXRlciwKLQkud3JpdGUJCT0gcHJvY19y
ZWdfd3JpdGUsCi0JLnNwbGljZV9yZWFkCT0gZ2VuZXJpY19maWxlX3NwbGljZV9yZWFkLAotCS5w
b2xsCQk9IHByb2NfcmVnX3BvbGwsCi0JLnVubG9ja2VkX2lvY3RsCT0gcHJvY19yZWdfdW5sb2Nr
ZWRfaW9jdGwsCi0JLm1tYXAJCT0gcHJvY19yZWdfbW1hcCwKLQkuZ2V0X3VubWFwcGVkX2FyZWEg
PSBwcm9jX3JlZ19nZXRfdW5tYXBwZWRfYXJlYSwKLQkub3BlbgkJPSBwcm9jX3JlZ19vcGVuLAot
CS5yZWxlYXNlCT0gcHJvY19yZWdfcmVsZWFzZSwKLX07Ci0KKwkvKiogLnNwbGljZV9yZWFkCT0g
Z2VuZXJpY19maWxlX3NwbGljZV9yZWFkLAorCSAqLwogI2lmZGVmIENPTkZJR19DT01QQVQKLXN0
YXRpYyBjb25zdCBzdHJ1Y3QgZmlsZV9vcGVyYXRpb25zIHByb2NfcmVnX2ZpbGVfb3BzX2NvbXBh
dCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3QgZmlsZV9vcGVyYXRpb25zIHByb2NfcmVnX2ZpbGVf
b3BzX25vX2NvbXBhdCA9IHsKIAkubGxzZWVrCQk9IHByb2NfcmVnX2xsc2VlaywKIAkucmVhZAkJ
PSBwcm9jX3JlZ19yZWFkLAogCS53cml0ZQkJPSBwcm9jX3JlZ193cml0ZSwKIAkucG9sbAkJPSBw
cm9jX3JlZ19wb2xsLAogCS51bmxvY2tlZF9pb2N0bAk9IHByb2NfcmVnX3VubG9ja2VkX2lvY3Rs
LAotCS5jb21wYXRfaW9jdGwJPSBwcm9jX3JlZ19jb21wYXRfaW9jdGwsCiAJLm1tYXAJCT0gcHJv
Y19yZWdfbW1hcCwKIAkuZ2V0X3VubWFwcGVkX2FyZWEgPSBwcm9jX3JlZ19nZXRfdW5tYXBwZWRf
YXJlYSwKIAkub3BlbgkJPSBwcm9jX3JlZ19vcGVuLAogCS5yZWxlYXNlCT0gcHJvY19yZWdfcmVs
ZWFzZSwKIH07CiAKLXN0YXRpYyBjb25zdCBzdHJ1Y3QgZmlsZV9vcGVyYXRpb25zIHByb2NfaXRl
cl9maWxlX29wc19jb21wYXQgPSB7Ci0JLmxsc2VlawkJPSBwcm9jX3JlZ19sbHNlZWssCi0JLnJl
YWRfaXRlcgk9IHByb2NfcmVnX3JlYWRfaXRlciwKLQkuc3BsaWNlX3JlYWQJPSBnZW5lcmljX2Zp
bGVfc3BsaWNlX3JlYWQsCi0JLndyaXRlCQk9IHByb2NfcmVnX3dyaXRlLAotCS5wb2xsCQk9IHBy
b2NfcmVnX3BvbGwsCi0JLnVubG9ja2VkX2lvY3RsCT0gcHJvY19yZWdfdW5sb2NrZWRfaW9jdGws
Ci0JLmNvbXBhdF9pb2N0bAk9IHByb2NfcmVnX2NvbXBhdF9pb2N0bCwKLQkubW1hcAkJPSBwcm9j
X3JlZ19tbWFwLAotCS5nZXRfdW5tYXBwZWRfYXJlYSA9IHByb2NfcmVnX2dldF91bm1hcHBlZF9h
cmVhLAotCS5vcGVuCQk9IHByb2NfcmVnX29wZW4sCi0JLnJlbGVhc2UJPSBwcm9jX3JlZ19yZWxl
YXNlLAotfTsKKwkvKiogLnNwbGljZV9yZWFkCT0gZ2VuZXJpY19maWxlX3NwbGljZV9yZWFkLAor
CSAqLwogI2VuZGlmCiAKIHN0YXRpYyB2b2lkIHByb2NfcHV0X2xpbmsodm9pZCAqcCkKQEAgLTY1
OSw1MSArNjI0LDQyIEBAIHN0cnVjdCBpbm9kZSAqcHJvY19nZXRfaW5vZGUoc3RydWN0IHN1cGVy
X2Jsb2NrICpzYiwgc3RydWN0IHByb2NfZGlyX2VudHJ5ICpkZSkKIHsKIAlzdHJ1Y3QgaW5vZGUg
Kmlub2RlID0gbmV3X2lub2RlKHNiKTsKIAotCWlmICghaW5vZGUpIHsKLQkJcGRlX3B1dChkZSk7
Ci0JCXJldHVybiBOVUxMOwotCX0KKwlpZiAoaW5vZGUpIHsKKwkJaW5vZGUtPmlfaW5vID0gZGUt
Pmxvd19pbm87CisJCWlub2RlLT5pX210aW1lID0gaW5vZGUtPmlfYXRpbWUgPSBpbm9kZS0+aV9j
dGltZSA9IGN1cnJlbnRfdGltZShpbm9kZSk7CisJCVBST0NfSShpbm9kZSktPnBkZSA9IGRlOwog
Ci0JaW5vZGUtPmlfaW5vID0gZGUtPmxvd19pbm87Ci0JaW5vZGUtPmlfbXRpbWUgPSBpbm9kZS0+
aV9hdGltZSA9IGlub2RlLT5pX2N0aW1lID0gY3VycmVudF90aW1lKGlub2RlKTsKLQlQUk9DX0ko
aW5vZGUpLT5wZGUgPSBkZTsKLQlpZiAoaXNfZW1wdHlfcGRlKGRlKSkgewotCQltYWtlX2VtcHR5
X2Rpcl9pbm9kZShpbm9kZSk7Ci0JCXJldHVybiBpbm9kZTsKLQl9CisJCWlmIChpc19lbXB0eV9w
ZGUoZGUpKSB7CisJCQltYWtlX2VtcHR5X2Rpcl9pbm9kZShpbm9kZSk7CisJCQlyZXR1cm4gaW5v
ZGU7CisJCX0KKwkJaWYgKGRlLT5tb2RlKSB7CisJCQlpbm9kZS0+aV9tb2RlID0gZGUtPm1vZGU7
CisJCQlpbm9kZS0+aV91aWQgPSBkZS0+dWlkOworCQkJaW5vZGUtPmlfZ2lkID0gZGUtPmdpZDsK
KwkJfQorCQlpZiAoZGUtPnNpemUpCisJCQlpbm9kZS0+aV9zaXplID0gZGUtPnNpemU7CisJCWlm
IChkZS0+bmxpbmspCisJCQlzZXRfbmxpbmsoaW5vZGUsIGRlLT5ubGluayk7CiAKLQlpZiAoZGUt
Pm1vZGUpIHsKLQkJaW5vZGUtPmlfbW9kZSA9IGRlLT5tb2RlOwotCQlpbm9kZS0+aV91aWQgPSBk
ZS0+dWlkOwotCQlpbm9kZS0+aV9naWQgPSBkZS0+Z2lkOwotCX0KLQlpZiAoZGUtPnNpemUpCi0J
CWlub2RlLT5pX3NpemUgPSBkZS0+c2l6ZTsKLQlpZiAoZGUtPm5saW5rKQotCQlzZXRfbmxpbmso
aW5vZGUsIGRlLT5ubGluayk7Ci0KLQlpZiAoU19JU1JFRyhpbm9kZS0+aV9tb2RlKSkgewotCQlp
bm9kZS0+aV9vcCA9IGRlLT5wcm9jX2lvcHM7Ci0JCWlmIChkZS0+cHJvY19vcHMtPnByb2NfcmVh
ZF9pdGVyKQotCQkJaW5vZGUtPmlfZm9wID0gJnByb2NfaXRlcl9maWxlX29wczsKLQkJZWxzZQor
CQlpZiAoU19JU1JFRyhpbm9kZS0+aV9tb2RlKSkgeworCQkJaW5vZGUtPmlfb3AgPSBkZS0+cHJv
Y19pb3BzOwogCQkJaW5vZGUtPmlfZm9wID0gJnByb2NfcmVnX2ZpbGVfb3BzOwogI2lmZGVmIENP
TkZJR19DT01QQVQKLQkJaWYgKGRlLT5wcm9jX29wcy0+cHJvY19jb21wYXRfaW9jdGwpIHsKLQkJ
CWlmIChkZS0+cHJvY19vcHMtPnByb2NfcmVhZF9pdGVyKQotCQkJCWlub2RlLT5pX2ZvcCA9ICZw
cm9jX2l0ZXJfZmlsZV9vcHNfY29tcGF0OwotCQkJZWxzZQotCQkJCWlub2RlLT5pX2ZvcCA9ICZw
cm9jX3JlZ19maWxlX29wc19jb21wYXQ7Ci0JCX0KKwkJCWlmICghZGUtPnByb2Nfb3BzLT5wcm9j
X2NvbXBhdF9pb2N0bCkgeworCQkJCWlub2RlLT5pX2ZvcCA9ICZwcm9jX3JlZ19maWxlX29wc19u
b19jb21wYXQ7CisJCQl9CiAjZW5kaWYKLQl9IGVsc2UgaWYgKFNfSVNESVIoaW5vZGUtPmlfbW9k
ZSkpIHsKLQkJaW5vZGUtPmlfb3AgPSBkZS0+cHJvY19pb3BzOwotCQlpbm9kZS0+aV9mb3AgPSBk
ZS0+cHJvY19kaXJfb3BzOwotCX0gZWxzZSBpZiAoU19JU0xOSyhpbm9kZS0+aV9tb2RlKSkgewot
CQlpbm9kZS0+aV9vcCA9IGRlLT5wcm9jX2lvcHM7Ci0JCWlub2RlLT5pX2ZvcCA9IE5VTEw7Ci0J
fSBlbHNlIHsKLQkJQlVHKCk7Ci0JfQorCQl9IGVsc2UgaWYgKFNfSVNESVIoaW5vZGUtPmlfbW9k
ZSkpIHsKKwkJCWlub2RlLT5pX29wID0gZGUtPnByb2NfaW9wczsKKwkJCWlub2RlLT5pX2ZvcCA9
IGRlLT5wcm9jX2Rpcl9vcHM7CisJCX0gZWxzZSBpZiAoU19JU0xOSyhpbm9kZS0+aV9tb2RlKSkg
eworCQkJaW5vZGUtPmlfb3AgPSBkZS0+cHJvY19pb3BzOworCQkJaW5vZGUtPmlfZm9wID0gTlVM
TDsKKwkJfSBlbHNlCisJCQlCVUcoKTsKKwl9IGVsc2UKKwkgICAgICAgcGRlX3B1dChkZSk7CiAJ
cmV0dXJuIGlub2RlOwogfQpkaWZmIC0tZ2l0IGEvZnMvcHJvYy9wcm9jX3N5c2N0bC5jIGIvZnMv
cHJvYy9wcm9jX3N5c2N0bC5jCmluZGV4IDA3MGQyZGY4YWI5Yy4uNmRhNDM5ZGRlNTI4IDEwMDY0
NAotLS0gYS9mcy9wcm9jL3Byb2Nfc3lzY3RsLmMKKysrIGIvZnMvcHJvYy9wcm9jX3N5c2N0bC5j
CkBAIC0xMiw3ICsxMiw2IEBACiAjaW5jbHVkZSA8bGludXgvY3JlZC5oPgogI2luY2x1ZGUgPGxp
bnV4L25hbWVpLmg+CiAjaW5jbHVkZSA8bGludXgvbW0uaD4KLSNpbmNsdWRlIDxsaW51eC91aW8u
aD4KICNpbmNsdWRlIDxsaW51eC9tb2R1bGUuaD4KICNpbmNsdWRlIDxsaW51eC9icGYtY2dyb3Vw
Lmg+CiAjaW5jbHVkZSA8bGludXgvbW91bnQuaD4KQEAgLTU0MSwxNCArNTQwLDEzIEBAIHN0YXRp
YyBzdHJ1Y3QgZGVudHJ5ICpwcm9jX3N5c19sb29rdXAoc3RydWN0IGlub2RlICpkaXIsIHN0cnVj
dCBkZW50cnkgKmRlbnRyeSwKIAlyZXR1cm4gZXJyOwogfQogCi1zdGF0aWMgc3NpemVfdCBwcm9j
X3N5c19jYWxsX2hhbmRsZXIoc3RydWN0IGtpb2NiICppb2NiLCBzdHJ1Y3QgaW92X2l0ZXIgKml0
ZXIsCi0JCWludCB3cml0ZSkKK3N0YXRpYyBzc2l6ZV90IHByb2Nfc3lzX2NhbGxfaGFuZGxlcihz
dHJ1Y3QgZmlsZSAqZmlscCwgdm9pZCBfX3VzZXIgKnVidWYsCisJCXNpemVfdCBjb3VudCwgbG9m
Zl90ICpwcG9zLCBpbnQgd3JpdGUpCiB7Ci0Jc3RydWN0IGlub2RlICppbm9kZSA9IGZpbGVfaW5v
ZGUoaW9jYi0+a2lfZmlscCk7CisJc3RydWN0IGlub2RlICppbm9kZSA9IGZpbGVfaW5vZGUoZmls
cCk7CiAJc3RydWN0IGN0bF90YWJsZV9oZWFkZXIgKmhlYWQgPSBncmFiX2hlYWRlcihpbm9kZSk7
CiAJc3RydWN0IGN0bF90YWJsZSAqdGFibGUgPSBQUk9DX0koaW5vZGUpLT5zeXNjdGxfZW50cnk7
Ci0Jc2l6ZV90IGNvdW50ID0gaW92X2l0ZXJfY291bnQoaXRlcik7Ci0JY2hhciAqa2J1ZjsKKwl2
b2lkICprYnVmOwogCXNzaXplX3QgZXJyb3I7CiAKIAlpZiAoSVNfRVJSKGhlYWQpKQpAQCAtNTcx
LDMwICs1NjksMzIgQEAgc3RhdGljIHNzaXplX3QgcHJvY19zeXNfY2FsbF9oYW5kbGVyKHN0cnVj
dCBraW9jYiAqaW9jYiwgc3RydWN0IGlvdl9pdGVyICppdGVyLAogCWVycm9yID0gLUVOT01FTTsK
IAlpZiAoY291bnQgPj0gS01BTExPQ19NQVhfU0laRSkKIAkJZ290byBvdXQ7Ci0Ja2J1ZiA9IGt2
emFsbG9jKGNvdW50ICsgMSwgR0ZQX0tFUk5FTCk7Ci0JaWYgKCFrYnVmKQotCQlnb3RvIG91dDsK
IAogCWlmICh3cml0ZSkgewotCQllcnJvciA9IC1FRkFVTFQ7Ci0JCWlmICghY29weV9mcm9tX2l0
ZXJfZnVsbChrYnVmLCBjb3VudCwgaXRlcikpCi0JCQlnb3RvIG91dF9mcmVlX2J1ZjsKLQkJa2J1
Zltjb3VudF0gPSAnXDAnOworCQlrYnVmID0gbWVtZHVwX3VzZXJfbnVsKHVidWYsIGNvdW50KTsK
KwkJaWYgKElTX0VSUihrYnVmKSkgeworCQkJZXJyb3IgPSBQVFJfRVJSKGtidWYpOworCQkJZ290
byBvdXQ7CisJCX0KKwl9IGVsc2UgeworCQlrYnVmID0ga3phbGxvYyhjb3VudCwgR0ZQX0tFUk5F
TCk7CisJCWlmICgha2J1ZikKKwkJCWdvdG8gb3V0OwogCX0KIAogCWVycm9yID0gQlBGX0NHUk9V
UF9SVU5fUFJPR19TWVNDVEwoaGVhZCwgdGFibGUsIHdyaXRlLCAma2J1ZiwgJmNvdW50LAotCQkJ
CQkgICAmaW9jYi0+a2lfcG9zKTsKKwkJCQkJICAgcHBvcyk7CiAJaWYgKGVycm9yKQogCQlnb3Rv
IG91dF9mcmVlX2J1ZjsKIAogCS8qIGNhcmVmdWw6IGNhbGxpbmcgY29udmVudGlvbnMgYXJlIG5h
c3R5IGhlcmUgKi8KLQllcnJvciA9IHRhYmxlLT5wcm9jX2hhbmRsZXIodGFibGUsIHdyaXRlLCBr
YnVmLCAmY291bnQsICZpb2NiLT5raV9wb3MpOworCWVycm9yID0gdGFibGUtPnByb2NfaGFuZGxl
cih0YWJsZSwgd3JpdGUsIGtidWYsICZjb3VudCwgcHBvcyk7CiAJaWYgKGVycm9yKQogCQlnb3Rv
IG91dF9mcmVlX2J1ZjsKIAogCWlmICghd3JpdGUpIHsKIAkJZXJyb3IgPSAtRUZBVUxUOwotCQlp
ZiAoY29weV90b19pdGVyKGtidWYsIGNvdW50LCBpdGVyKSA8IGNvdW50KQorCQlpZiAoY29weV90
b191c2VyKHVidWYsIGtidWYsIGNvdW50KSkKIAkJCWdvdG8gb3V0X2ZyZWVfYnVmOwogCX0KIApA
QCAtNjA3LDE0ICs2MDcsMTYgQEAgc3RhdGljIHNzaXplX3QgcHJvY19zeXNfY2FsbF9oYW5kbGVy
KHN0cnVjdCBraW9jYiAqaW9jYiwgc3RydWN0IGlvdl9pdGVyICppdGVyLAogCXJldHVybiBlcnJv
cjsKIH0KIAotc3RhdGljIHNzaXplX3QgcHJvY19zeXNfcmVhZChzdHJ1Y3Qga2lvY2IgKmlvY2Is
IHN0cnVjdCBpb3ZfaXRlciAqaXRlcikKK3N0YXRpYyBzc2l6ZV90IHByb2Nfc3lzX3JlYWQoc3Ry
dWN0IGZpbGUgKmZpbHAsIGNoYXIgX191c2VyICpidWYsCisJCQkJc2l6ZV90IGNvdW50LCBsb2Zm
X3QgKnBwb3MpCiB7Ci0JcmV0dXJuIHByb2Nfc3lzX2NhbGxfaGFuZGxlcihpb2NiLCBpdGVyLCAw
KTsKKwlyZXR1cm4gcHJvY19zeXNfY2FsbF9oYW5kbGVyKGZpbHAsICh2b2lkIF9fdXNlciAqKWJ1
ZiwgY291bnQsIHBwb3MsIDApOwogfQogCi1zdGF0aWMgc3NpemVfdCBwcm9jX3N5c193cml0ZShz
dHJ1Y3Qga2lvY2IgKmlvY2IsIHN0cnVjdCBpb3ZfaXRlciAqaXRlcikKK3N0YXRpYyBzc2l6ZV90
IHByb2Nfc3lzX3dyaXRlKHN0cnVjdCBmaWxlICpmaWxwLCBjb25zdCBjaGFyIF9fdXNlciAqYnVm
LAorCQkJCXNpemVfdCBjb3VudCwgbG9mZl90ICpwcG9zKQogewotCXJldHVybiBwcm9jX3N5c19j
YWxsX2hhbmRsZXIoaW9jYiwgaXRlciwgMSk7CisJcmV0dXJuIHByb2Nfc3lzX2NhbGxfaGFuZGxl
cihmaWxwLCAodm9pZCBfX3VzZXIgKilidWYsIGNvdW50LCBwcG9zLCAxKTsKIH0KIAogc3RhdGlj
IGludCBwcm9jX3N5c19vcGVuKHN0cnVjdCBpbm9kZSAqaW5vZGUsIHN0cnVjdCBmaWxlICpmaWxw
KQpAQCAtODUxLDEwICs4NTMsOCBAQCBzdGF0aWMgaW50IHByb2Nfc3lzX2dldGF0dHIoY29uc3Qg
c3RydWN0IHBhdGggKnBhdGgsIHN0cnVjdCBrc3RhdCAqc3RhdCwKIHN0YXRpYyBjb25zdCBzdHJ1
Y3QgZmlsZV9vcGVyYXRpb25zIHByb2Nfc3lzX2ZpbGVfb3BlcmF0aW9ucyA9IHsKIAkub3BlbgkJ
PSBwcm9jX3N5c19vcGVuLAogCS5wb2xsCQk9IHByb2Nfc3lzX3BvbGwsCi0JLnJlYWRfaXRlcgk9
IHByb2Nfc3lzX3JlYWQsCi0JLndyaXRlX2l0ZXIJPSBwcm9jX3N5c193cml0ZSwKLQkuc3BsaWNl
X3JlYWQJPSBnZW5lcmljX2ZpbGVfc3BsaWNlX3JlYWQsCi0JLnNwbGljZV93cml0ZQk9IGl0ZXJf
ZmlsZV9zcGxpY2Vfd3JpdGUsCisJLnJlYWQJCT0gcHJvY19zeXNfcmVhZCwKKwkud3JpdGUJCT0g
cHJvY19zeXNfd3JpdGUsCiAJLmxsc2VlawkJPSBkZWZhdWx0X2xsc2VlaywKIH07CiAKZGlmZiAt
LWdpdCBhL2ZzL3Byb2Mvc3RhdC5jIGIvZnMvcHJvYy9zdGF0LmMKaW5kZXggNDY5NWI2ZGUzMTUx
Li40NmIzMjkzMDE1ZmUgMTAwNjQ0Ci0tLSBhL2ZzL3Byb2Mvc3RhdC5jCisrKyBiL2ZzL3Byb2Mv
c3RhdC5jCkBAIC0yMjYsNyArMjI2LDcgQEAgc3RhdGljIGludCBzdGF0X29wZW4oc3RydWN0IGlu
b2RlICppbm9kZSwgc3RydWN0IGZpbGUgKmZpbGUpCiBzdGF0aWMgY29uc3Qgc3RydWN0IHByb2Nf
b3BzIHN0YXRfcHJvY19vcHMgPSB7CiAJLnByb2NfZmxhZ3MJPSBQUk9DX0VOVFJZX1BFUk1BTkVO
VCwKIAkucHJvY19vcGVuCT0gc3RhdF9vcGVuLAotCS5wcm9jX3JlYWRfaXRlcgk9IHNlcV9yZWFk
X2l0ZXIsCisJLnByb2NfcmVhZAk9IHNlcV9yZWFkLAogCS5wcm9jX2xzZWVrCT0gc2VxX2xzZWVr
LAogCS5wcm9jX3JlbGVhc2UJPSBzaW5nbGVfcmVsZWFzZSwKIH07CmRpZmYgLS1naXQgYS9mcy9y
ZWFkX3dyaXRlLmMgYi9mcy9yZWFkX3dyaXRlLmMKaW5kZXggNzVmNzY0YjQzNDE4Li41NTJiOTkz
Yzg4ZWYgMTAwNjQ0Ci0tLSBhL2ZzL3JlYWRfd3JpdGUuYworKysgYi9mcy9yZWFkX3dyaXRlLmMK
QEAgLTQxOSw0MiArNDE5LDI3IEBAIHN0YXRpYyBzc2l6ZV90IG5ld19zeW5jX3JlYWQoc3RydWN0
IGZpbGUgKmZpbHAsIGNoYXIgX191c2VyICpidWYsIHNpemVfdCBsZW4sIGxvCiAJcmV0dXJuIHJl
dDsKIH0KIAotc3RhdGljIGludCB3YXJuX3Vuc3VwcG9ydGVkKHN0cnVjdCBmaWxlICpmaWxlLCBj
b25zdCBjaGFyICpvcCkKLXsKLQlwcl93YXJuX3JhdGVsaW1pdGVkKAotCQkia2VybmVsICVzIG5v
dCBzdXBwb3J0ZWQgZm9yIGZpbGUgJXBENCAocGlkOiAlZCBjb21tOiAlLjIwcylcbiIsCi0JCW9w
LCBmaWxlLCBjdXJyZW50LT5waWQsIGN1cnJlbnQtPmNvbW0pOwotCXJldHVybiAtRUlOVkFMOwot
fQotCiBzc2l6ZV90IF9fa2VybmVsX3JlYWQoc3RydWN0IGZpbGUgKmZpbGUsIHZvaWQgKmJ1Ziwg
c2l6ZV90IGNvdW50LCBsb2ZmX3QgKnBvcykKIHsKLQlzdHJ1Y3Qga3ZlYyBpb3YgPSB7Ci0JCS5p
b3ZfYmFzZQk9IGJ1ZiwKLQkJLmlvdl9sZW4JPSBtaW5fdChzaXplX3QsIGNvdW50LCBNQVhfUldf
Q09VTlQpLAotCX07Ci0Jc3RydWN0IGtpb2NiIGtpb2NiOwotCXN0cnVjdCBpb3ZfaXRlciBpdGVy
OworCW1tX3NlZ21lbnRfdCBvbGRfZnMgPSBnZXRfZnMoKTsKIAlzc2l6ZV90IHJldDsKIAogCWlm
IChXQVJOX09OX09OQ0UoIShmaWxlLT5mX21vZGUgJiBGTU9ERV9SRUFEKSkpCiAJCXJldHVybiAt
RUlOVkFMOwogCWlmICghKGZpbGUtPmZfbW9kZSAmIEZNT0RFX0NBTl9SRUFEKSkKIAkJcmV0dXJu
IC1FSU5WQUw7Ci0JLyoKLQkgKiBBbHNvIGZhaWwgaWYgLT5yZWFkX2l0ZXIgYW5kIC0+cmVhZCBh
cmUgYm90aCB3aXJlZCB1cCBhcyB0aGF0Ci0JICogaW1wbGllcyB2ZXJ5IGNvbnZvbHV0ZWQgc2Vt
YW50aWNzLgotCSAqLwotCWlmICh1bmxpa2VseSghZmlsZS0+Zl9vcC0+cmVhZF9pdGVyIHx8IGZp
bGUtPmZfb3AtPnJlYWQpKQotCQlyZXR1cm4gd2Fybl91bnN1cHBvcnRlZChmaWxlLCAicmVhZCIp
OwogCi0JaW5pdF9zeW5jX2tpb2NiKCZraW9jYiwgZmlsZSk7Ci0Ja2lvY2Iua2lfcG9zID0gcG9z
ID8gKnBvcyA6IDA7Ci0JaW92X2l0ZXJfa3ZlYygmaXRlciwgUkVBRCwgJmlvdiwgMSwgaW92Lmlv
dl9sZW4pOwotCXJldCA9IGZpbGUtPmZfb3AtPnJlYWRfaXRlcigma2lvY2IsICZpdGVyKTsKKwlp
ZiAoY291bnQgPiBNQVhfUldfQ09VTlQpCisJCWNvdW50ID0gIE1BWF9SV19DT1VOVDsKKwlzZXRf
ZnMoS0VSTkVMX0RTKTsKKwlpZiAoZmlsZS0+Zl9vcC0+cmVhZCkKKwkJcmV0ID0gZmlsZS0+Zl9v
cC0+cmVhZChmaWxlLCAodm9pZCBfX3VzZXIgKilidWYsIGNvdW50LCBwb3MpOworCWVsc2UgaWYg
KGZpbGUtPmZfb3AtPnJlYWRfaXRlcikKKwkJcmV0ID0gbmV3X3N5bmNfcmVhZChmaWxlLCAodm9p
ZCBfX3VzZXIgKilidWYsIGNvdW50LCBwb3MpOworCWVsc2UKKwkJcmV0ID0gLUVJTlZBTDsKKwlz
ZXRfZnMob2xkX2ZzKTsKIAlpZiAocmV0ID4gMCkgewotCQlpZiAocG9zKQotCQkJKnBvcyA9IGtp
b2NiLmtpX3BvczsKIAkJZnNub3RpZnlfYWNjZXNzKGZpbGUpOwogCQlhZGRfcmNoYXIoY3VycmVu
dCwgcmV0KTsKIAl9CkBAIC01MjUsMzIgKzUxMCwyOCBAQCBzdGF0aWMgc3NpemVfdCBuZXdfc3lu
Y193cml0ZShzdHJ1Y3QgZmlsZSAqZmlscCwgY29uc3QgY2hhciBfX3VzZXIgKmJ1Ziwgc2l6ZV90
CiAvKiBjYWxsZXIgaXMgcmVzcG9uc2libGUgZm9yIGZpbGVfc3RhcnRfd3JpdGUvZmlsZV9lbmRf
d3JpdGUgKi8KIHNzaXplX3QgX19rZXJuZWxfd3JpdGUoc3RydWN0IGZpbGUgKmZpbGUsIGNvbnN0
IHZvaWQgKmJ1Ziwgc2l6ZV90IGNvdW50LCBsb2ZmX3QgKnBvcykKIHsKLQlzdHJ1Y3Qga3ZlYyBp
b3YgPSB7Ci0JCS5pb3ZfYmFzZQk9ICh2b2lkICopYnVmLAotCQkuaW92X2xlbgk9IG1pbl90KHNp
emVfdCwgY291bnQsIE1BWF9SV19DT1VOVCksCi0JfTsKLQlzdHJ1Y3Qga2lvY2Iga2lvY2I7Ci0J
c3RydWN0IGlvdl9pdGVyIGl0ZXI7CisJbW1fc2VnbWVudF90IG9sZF9mczsKKwljb25zdCBjaGFy
IF9fdXNlciAqcDsKIAlzc2l6ZV90IHJldDsKIAogCWlmIChXQVJOX09OX09OQ0UoIShmaWxlLT5m
X21vZGUgJiBGTU9ERV9XUklURSkpKQogCQlyZXR1cm4gLUVCQURGOwogCWlmICghKGZpbGUtPmZf
bW9kZSAmIEZNT0RFX0NBTl9XUklURSkpCiAJCXJldHVybiAtRUlOVkFMOwotCS8qCi0JICogQWxz
byBmYWlsIGlmIC0+d3JpdGVfaXRlciBhbmQgLT53cml0ZSBhcmUgYm90aCB3aXJlZCB1cCBhcyB0
aGF0Ci0JICogaW1wbGllcyB2ZXJ5IGNvbnZvbHV0ZWQgc2VtYW50aWNzLgotCSAqLwotCWlmICh1
bmxpa2VseSghZmlsZS0+Zl9vcC0+d3JpdGVfaXRlciB8fCBmaWxlLT5mX29wLT53cml0ZSkpCi0J
CXJldHVybiB3YXJuX3Vuc3VwcG9ydGVkKGZpbGUsICJ3cml0ZSIpOwogCi0JaW5pdF9zeW5jX2tp
b2NiKCZraW9jYiwgZmlsZSk7Ci0Ja2lvY2Iua2lfcG9zID0gcG9zID8gKnBvcyA6IDA7Ci0JaW92
X2l0ZXJfa3ZlYygmaXRlciwgV1JJVEUsICZpb3YsIDEsIGlvdi5pb3ZfbGVuKTsKLQlyZXQgPSBm
aWxlLT5mX29wLT53cml0ZV9pdGVyKCZraW9jYiwgJml0ZXIpOworCW9sZF9mcyA9IGdldF9mcygp
OworCXNldF9mcyhLRVJORUxfRFMpOworCXAgPSAoX19mb3JjZSBjb25zdCBjaGFyIF9fdXNlciAq
KWJ1ZjsKKwlpZiAoY291bnQgPiBNQVhfUldfQ09VTlQpCisJCWNvdW50ID0gIE1BWF9SV19DT1VO
VDsKKwlpZiAoZmlsZS0+Zl9vcC0+d3JpdGUpCisJCXJldCA9IGZpbGUtPmZfb3AtPndyaXRlKGZp
bGUsIHAsIGNvdW50LCBwb3MpOworCWVsc2UgaWYgKGZpbGUtPmZfb3AtPndyaXRlX2l0ZXIpCisJ
CXJldCA9IG5ld19zeW5jX3dyaXRlKGZpbGUsIHAsIGNvdW50LCBwb3MpOworCWVsc2UKKwkJcmV0
ID0gLUVJTlZBTDsKKwlzZXRfZnMob2xkX2ZzKTsKIAlpZiAocmV0ID4gMCkgewotCQlpZiAocG9z
KQotCQkJKnBvcyA9IGtpb2NiLmtpX3BvczsKIAkJZnNub3RpZnlfbW9kaWZ5KGZpbGUpOwogCQlh
ZGRfd2NoYXIoY3VycmVudCwgcmV0KTsKIAl9CkBAIC05MDgsNyArODg5LDcgQEAgc3NpemVfdCB2
ZnNfaXRlcl93cml0ZShzdHJ1Y3QgZmlsZSAqZmlsZSwgc3RydWN0IGlvdl9pdGVyICppdGVyLCBs
b2ZmX3QgKnBwb3MsCiB9CiBFWFBPUlRfU1lNQk9MKHZmc19pdGVyX3dyaXRlKTsKIAotc3RhdGlj
IHNzaXplX3QgdmZzX3JlYWR2KHN0cnVjdCBmaWxlICpmaWxlLCBjb25zdCBzdHJ1Y3QgaW92ZWMg
X191c2VyICp2ZWMsCitzc2l6ZV90IHZmc19yZWFkdihzdHJ1Y3QgZmlsZSAqZmlsZSwgY29uc3Qg
c3RydWN0IGlvdmVjIF9fdXNlciAqdmVjLAogCQkgIHVuc2lnbmVkIGxvbmcgdmxlbiwgbG9mZl90
ICpwb3MsIHJ3Zl90IGZsYWdzKQogewogCXN0cnVjdCBpb3ZlYyBpb3ZzdGFja1tVSU9fRkFTVElP
Vl07CmRpZmYgLS1naXQgYS9mcy9zcGxpY2UuYyBiL2ZzL3NwbGljZS5jCmluZGV4IDg2NmQ1YzIz
NjdiMi4uZDkzMDVhZjkzMGQ4IDEwMDY0NAotLS0gYS9mcy9zcGxpY2UuYworKysgYi9mcy9zcGxp
Y2UuYwpAQCAtMzQxLDYgKzM0MSw4OSBAQCBjb25zdCBzdHJ1Y3QgcGlwZV9idWZfb3BlcmF0aW9u
cyBub3N0ZWFsX3BpcGVfYnVmX29wcyA9IHsKIH07CiBFWFBPUlRfU1lNQk9MKG5vc3RlYWxfcGlw
ZV9idWZfb3BzKTsKIAorc3RhdGljIHNzaXplX3Qga2VybmVsX3JlYWR2KHN0cnVjdCBmaWxlICpm
aWxlLCBjb25zdCBzdHJ1Y3Qga3ZlYyAqdmVjLAorCQkJICAgIHVuc2lnbmVkIGxvbmcgdmxlbiwg
bG9mZl90IG9mZnNldCkKK3sKKwltbV9zZWdtZW50X3Qgb2xkX2ZzOworCWxvZmZfdCBwb3MgPSBv
ZmZzZXQ7CisJc3NpemVfdCByZXM7CisKKwlvbGRfZnMgPSBnZXRfZnMoKTsKKwlzZXRfZnMoS0VS
TkVMX0RTKTsKKwkvKiBUaGUgY2FzdCB0byBhIHVzZXIgcG9pbnRlciBpcyB2YWxpZCBkdWUgdG8g
dGhlIHNldF9mcygpICovCisJcmVzID0gdmZzX3JlYWR2KGZpbGUsIChjb25zdCBzdHJ1Y3QgaW92
ZWMgX191c2VyICopdmVjLCB2bGVuLCAmcG9zLCAwKTsKKwlzZXRfZnMob2xkX2ZzKTsKKworCXJl
dHVybiByZXM7Cit9CisKK3N0YXRpYyBzc2l6ZV90IGRlZmF1bHRfZmlsZV9zcGxpY2VfcmVhZChz
dHJ1Y3QgZmlsZSAqaW4sIGxvZmZfdCAqcHBvcywKKwkJCQkgc3RydWN0IHBpcGVfaW5vZGVfaW5m
byAqcGlwZSwgc2l6ZV90IGxlbiwKKwkJCQkgdW5zaWduZWQgaW50IGZsYWdzKQoreworCXN0cnVj
dCBrdmVjICp2ZWMsIF9fdmVjW1BJUEVfREVGX0JVRkZFUlNdOworCXN0cnVjdCBpb3ZfaXRlciB0
bzsKKwlzdHJ1Y3QgcGFnZSAqKnBhZ2VzOworCXVuc2lnbmVkIGludCBucl9wYWdlczsKKwl1bnNp
Z25lZCBpbnQgbWFzazsKKwlzaXplX3Qgb2Zmc2V0LCBiYXNlLCBjb3BpZWQgPSAwOworCXNzaXpl
X3QgcmVzOworCWludCBpOworCisJaWYgKHBpcGVfZnVsbChwaXBlLT5oZWFkLCBwaXBlLT50YWls
LCBwaXBlLT5tYXhfdXNhZ2UpKQorCQlyZXR1cm4gLUVBR0FJTjsKKworCS8qCisJICogVHJ5IHRv
IGtlZXAgcGFnZSBib3VuZGFyaWVzIG1hdGNoaW5nIHRvIHNvdXJjZSBwYWdlY2FjaGUgb25lcyAt
CisJICogaXQgcHJvYmFibHkgd29uJ3QgYmUgbXVjaCBoZWxwLCBidXQuLi4KKwkgKi8KKwlvZmZz
ZXQgPSAqcHBvcyAmIH5QQUdFX01BU0s7CisKKwlpb3ZfaXRlcl9waXBlKCZ0bywgUkVBRCwgcGlw
ZSwgbGVuICsgb2Zmc2V0KTsKKworCXJlcyA9IGlvdl9pdGVyX2dldF9wYWdlc19hbGxvYygmdG8s
ICZwYWdlcywgbGVuICsgb2Zmc2V0LCAmYmFzZSk7CisJaWYgKHJlcyA8PSAwKQorCQlyZXR1cm4g
LUVOT01FTTsKKworCW5yX3BhZ2VzID0gRElWX1JPVU5EX1VQKHJlcyArIGJhc2UsIFBBR0VfU0la
RSk7CisKKwl2ZWMgPSBfX3ZlYzsKKwlpZiAobnJfcGFnZXMgPiBQSVBFX0RFRl9CVUZGRVJTKSB7
CisJCXZlYyA9IGttYWxsb2NfYXJyYXkobnJfcGFnZXMsIHNpemVvZihzdHJ1Y3Qga3ZlYyksIEdG
UF9LRVJORUwpOworCQlpZiAodW5saWtlbHkoIXZlYykpIHsKKwkJCXJlcyA9IC1FTk9NRU07CisJ
CQlnb3RvIG91dDsKKwkJfQorCX0KKworCW1hc2sgPSBwaXBlLT5yaW5nX3NpemUgLSAxOworCXBp
cGUtPmJ1ZnNbdG8uaGVhZCAmIG1hc2tdLm9mZnNldCA9IG9mZnNldDsKKwlwaXBlLT5idWZzW3Rv
LmhlYWQgJiBtYXNrXS5sZW4gLT0gb2Zmc2V0OworCisJZm9yIChpID0gMDsgaSA8IG5yX3BhZ2Vz
OyBpKyspIHsKKwkJc2l6ZV90IHRoaXNfbGVuID0gbWluX3Qoc2l6ZV90LCBsZW4sIFBBR0VfU0la
RSAtIG9mZnNldCk7CisJCXZlY1tpXS5pb3ZfYmFzZSA9IHBhZ2VfYWRkcmVzcyhwYWdlc1tpXSkg
KyBvZmZzZXQ7CisJCXZlY1tpXS5pb3ZfbGVuID0gdGhpc19sZW47CisJCWxlbiAtPSB0aGlzX2xl
bjsKKwkJb2Zmc2V0ID0gMDsKKwl9CisKKwlyZXMgPSBrZXJuZWxfcmVhZHYoaW4sIHZlYywgbnJf
cGFnZXMsICpwcG9zKTsKKwlpZiAocmVzID4gMCkgeworCQljb3BpZWQgPSByZXM7CisJCSpwcG9z
ICs9IHJlczsKKwl9CisKKwlpZiAodmVjICE9IF9fdmVjKQorCQlrZnJlZSh2ZWMpOworb3V0Ogor
CWZvciAoaSA9IDA7IGkgPCBucl9wYWdlczsgaSsrKQorCQlwdXRfcGFnZShwYWdlc1tpXSk7CisJ
a3ZmcmVlKHBhZ2VzKTsKKwlpb3ZfaXRlcl9hZHZhbmNlKCZ0bywgY29waWVkKTsJLyogdHJ1bmNh
dGVzIGFuZCBkaXNjYXJkcyAqLworCXJldHVybiByZXM7Cit9CisKIC8qCiAgKiBTZW5kICdzZC0+
bGVuJyBieXRlcyB0byBzb2NrZXQgZnJvbSAnc2QtPmZpbGUnIGF0IHBvc2l0aW9uICdzZC0+cG9z
JwogICogdXNpbmcgc2VuZHBhZ2UoKS4gUmV0dXJuIHRoZSBudW1iZXIgb2YgYnl0ZXMgc2VudC4K
QEAgLTcyNCw2ICs4MDcsMzMgQEAgaXRlcl9maWxlX3NwbGljZV93cml0ZShzdHJ1Y3QgcGlwZV9p
bm9kZV9pbmZvICpwaXBlLCBzdHJ1Y3QgZmlsZSAqb3V0LAogCiBFWFBPUlRfU1lNQk9MKGl0ZXJf
ZmlsZV9zcGxpY2Vfd3JpdGUpOwogCitzdGF0aWMgaW50IHdyaXRlX3BpcGVfYnVmKHN0cnVjdCBw
aXBlX2lub2RlX2luZm8gKnBpcGUsIHN0cnVjdCBwaXBlX2J1ZmZlciAqYnVmLAorCQkJICBzdHJ1
Y3Qgc3BsaWNlX2Rlc2MgKnNkKQoreworCWludCByZXQ7CisJdm9pZCAqZGF0YTsKKwlsb2ZmX3Qg
dG1wID0gc2QtPnBvczsKKworCWRhdGEgPSBrbWFwKGJ1Zi0+cGFnZSk7CisJcmV0ID0gX19rZXJu
ZWxfd3JpdGUoc2QtPnUuZmlsZSwgZGF0YSArIGJ1Zi0+b2Zmc2V0LCBzZC0+bGVuLCAmdG1wKTsK
KwlrdW5tYXAoYnVmLT5wYWdlKTsKKworCXJldHVybiByZXQ7Cit9CisKK3N0YXRpYyBzc2l6ZV90
IGRlZmF1bHRfZmlsZV9zcGxpY2Vfd3JpdGUoc3RydWN0IHBpcGVfaW5vZGVfaW5mbyAqcGlwZSwK
KwkJCQkJIHN0cnVjdCBmaWxlICpvdXQsIGxvZmZfdCAqcHBvcywKKwkJCQkJIHNpemVfdCBsZW4s
IHVuc2lnbmVkIGludCBmbGFncykKK3sKKwlzc2l6ZV90IHJldDsKKworCXJldCA9IHNwbGljZV9m
cm9tX3BpcGUocGlwZSwgb3V0LCBwcG9zLCBsZW4sIGZsYWdzLCB3cml0ZV9waXBlX2J1Zik7CisJ
aWYgKHJldCA+IDApCisJCSpwcG9zICs9IHJldDsKKworCXJldHVybiByZXQ7Cit9CisKIC8qKgog
ICogZ2VuZXJpY19zcGxpY2Vfc2VuZHBhZ2UgLSBzcGxpY2UgZGF0YSBmcm9tIGEgcGlwZSB0byBh
IHNvY2tldAogICogQHBpcGU6CXBpcGUgdG8gc3BsaWNlIGZyb20KQEAgLTc0NSwyMyArODU1LDE1
IEBAIHNzaXplX3QgZ2VuZXJpY19zcGxpY2Vfc2VuZHBhZ2Uoc3RydWN0IHBpcGVfaW5vZGVfaW5m
byAqcGlwZSwgc3RydWN0IGZpbGUgKm91dCwKIAogRVhQT1JUX1NZTUJPTChnZW5lcmljX3NwbGlj
ZV9zZW5kcGFnZSk7CiAKLXN0YXRpYyBpbnQgd2Fybl91bnN1cHBvcnRlZChzdHJ1Y3QgZmlsZSAq
ZmlsZSwgY29uc3QgY2hhciAqb3ApCi17Ci0JcHJfZGVidWdfcmF0ZWxpbWl0ZWQoCi0JCSJzcGxp
Y2UgJXMgbm90IHN1cHBvcnRlZCBmb3IgZmlsZSAlcEQ0IChwaWQ6ICVkIGNvbW06ICUuMjBzKVxu
IiwKLQkJb3AsIGZpbGUsIGN1cnJlbnQtPnBpZCwgY3VycmVudC0+Y29tbSk7Ci0JcmV0dXJuIC1F
SU5WQUw7Ci19Ci0KIC8qCiAgKiBBdHRlbXB0IHRvIGluaXRpYXRlIGEgc3BsaWNlIGZyb20gcGlw
ZSB0byBmaWxlLgogICovCiBzdGF0aWMgbG9uZyBkb19zcGxpY2VfZnJvbShzdHJ1Y3QgcGlwZV9p
bm9kZV9pbmZvICpwaXBlLCBzdHJ1Y3QgZmlsZSAqb3V0LAogCQkJICAgbG9mZl90ICpwcG9zLCBz
aXplX3QgbGVuLCB1bnNpZ25lZCBpbnQgZmxhZ3MpCiB7Ci0JaWYgKHVubGlrZWx5KCFvdXQtPmZf
b3AtPnNwbGljZV93cml0ZSkpCi0JCXJldHVybiB3YXJuX3Vuc3VwcG9ydGVkKG91dCwgIndyaXRl
Iik7Ci0JcmV0dXJuIG91dC0+Zl9vcC0+c3BsaWNlX3dyaXRlKHBpcGUsIG91dCwgcHBvcywgbGVu
LCBmbGFncyk7CisJaWYgKG91dC0+Zl9vcC0+c3BsaWNlX3dyaXRlKQorCQlyZXR1cm4gb3V0LT5m
X29wLT5zcGxpY2Vfd3JpdGUocGlwZSwgb3V0LCBwcG9zLCBsZW4sIGZsYWdzKTsKKwlyZXR1cm4g
ZGVmYXVsdF9maWxlX3NwbGljZV93cml0ZShwaXBlLCBvdXQsIHBwb3MsIGxlbiwgZmxhZ3MpOwog
fQogCiAvKgpAQCAtNzgzLDkgKzg4NSw5IEBAIHN0YXRpYyBsb25nIGRvX3NwbGljZV90byhzdHJ1
Y3QgZmlsZSAqaW4sIGxvZmZfdCAqcHBvcywKIAlpZiAodW5saWtlbHkobGVuID4gTUFYX1JXX0NP
VU5UKSkKIAkJbGVuID0gTUFYX1JXX0NPVU5UOwogCi0JaWYgKHVubGlrZWx5KCFpbi0+Zl9vcC0+
c3BsaWNlX3JlYWQpKQotCQlyZXR1cm4gd2Fybl91bnN1cHBvcnRlZChpbiwgInJlYWQiKTsKLQly
ZXR1cm4gaW4tPmZfb3AtPnNwbGljZV9yZWFkKGluLCBwcG9zLCBwaXBlLCBsZW4sIGZsYWdzKTsK
KwlpZiAoaW4tPmZfb3AtPnNwbGljZV9yZWFkKQorCQlyZXR1cm4gaW4tPmZfb3AtPnNwbGljZV9y
ZWFkKGluLCBwcG9zLCBwaXBlLCBsZW4sIGZsYWdzKTsKKwlyZXR1cm4gZGVmYXVsdF9maWxlX3Nw
bGljZV9yZWFkKGluLCBwcG9zLCBwaXBlLCBsZW4sIGZsYWdzKTsKIH0KIAogLyoqCmRpZmYgLS1n
aXQgYS9pbmNsdWRlL2xpbnV4L2JwZi1jZ3JvdXAuaCBiL2luY2x1ZGUvbGludXgvYnBmLWNncm91
cC5oCmluZGV4IGVkNzFiZDFhMDgyNS4uMmY5OGQyZmNlNjJlIDEwMDY0NAotLS0gYS9pbmNsdWRl
L2xpbnV4L2JwZi1jZ3JvdXAuaAorKysgYi9pbmNsdWRlL2xpbnV4L2JwZi1jZ3JvdXAuaApAQCAt
MTM2LDcgKzEzNiw3IEBAIGludCBfX2Nncm91cF9icGZfY2hlY2tfZGV2X3Blcm1pc3Npb24oc2hv
cnQgZGV2X3R5cGUsIHUzMiBtYWpvciwgdTMyIG1pbm9yLAogCiBpbnQgX19jZ3JvdXBfYnBmX3J1
bl9maWx0ZXJfc3lzY3RsKHN0cnVjdCBjdGxfdGFibGVfaGVhZGVyICpoZWFkLAogCQkJCSAgIHN0
cnVjdCBjdGxfdGFibGUgKnRhYmxlLCBpbnQgd3JpdGUsCi0JCQkJICAgY2hhciAqKmJ1Ziwgc2l6
ZV90ICpwY291bnQsIGxvZmZfdCAqcHBvcywKKwkJCQkgICB2b2lkICoqYnVmLCBzaXplX3QgKnBj
b3VudCwgbG9mZl90ICpwcG9zLAogCQkJCSAgIGVudW0gYnBmX2F0dGFjaF90eXBlIHR5cGUpOwog
CiBpbnQgX19jZ3JvdXBfYnBmX3J1bl9maWx0ZXJfc2V0c29ja29wdChzdHJ1Y3Qgc29jayAqc29j
aywgaW50ICpsZXZlbCwKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvZnMuaCBiL2luY2x1ZGUv
bGludXgvZnMuaAppbmRleCA4YmRlMzJjZjk3MTEuLmMyMDM1YWZlNzliMCAxMDA2NDQKLS0tIGEv
aW5jbHVkZS9saW51eC9mcy5oCisrKyBiL2luY2x1ZGUvbGludXgvZnMuaApAQCAtMTkxMCw2ICsx
OTEwLDggQEAgc3RhdGljIGlubGluZSBpbnQgY2FsbF9tbWFwKHN0cnVjdCBmaWxlICpmaWxlLCBz
dHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSkKIAogZXh0ZXJuIHNzaXplX3QgdmZzX3JlYWQoc3Ry
dWN0IGZpbGUgKiwgY2hhciBfX3VzZXIgKiwgc2l6ZV90LCBsb2ZmX3QgKik7CiBleHRlcm4gc3Np
emVfdCB2ZnNfd3JpdGUoc3RydWN0IGZpbGUgKiwgY29uc3QgY2hhciBfX3VzZXIgKiwgc2l6ZV90
LCBsb2ZmX3QgKik7CitleHRlcm4gc3NpemVfdCB2ZnNfcmVhZHYoc3RydWN0IGZpbGUgKiwgY29u
c3Qgc3RydWN0IGlvdmVjIF9fdXNlciAqLAorCQl1bnNpZ25lZCBsb25nLCBsb2ZmX3QgKiwgcndm
X3QpOwogZXh0ZXJuIHNzaXplX3QgdmZzX2NvcHlfZmlsZV9yYW5nZShzdHJ1Y3QgZmlsZSAqLCBs
b2ZmX3QgLCBzdHJ1Y3QgZmlsZSAqLAogCQkJCSAgIGxvZmZfdCwgc2l6ZV90LCB1bnNpZ25lZCBp
bnQpOwogZXh0ZXJuIHNzaXplX3QgZ2VuZXJpY19jb3B5X2ZpbGVfcmFuZ2Uoc3RydWN0IGZpbGUg
KmZpbGVfaW4sIGxvZmZfdCBwb3NfaW4sCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L3Byb2Nf
ZnMuaCBiL2luY2x1ZGUvbGludXgvcHJvY19mcy5oCmluZGV4IDAwMGNjMDUzM2MzMy4uN2I1YjA3
NjVmZjRjIDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L3Byb2NfZnMuaAorKysgYi9pbmNsdWRl
L2xpbnV4L3Byb2NfZnMuaApAQCAtMzAsNyArMzAsNiBAQCBzdHJ1Y3QgcHJvY19vcHMgewogCXVu
c2lnbmVkIGludCBwcm9jX2ZsYWdzOwogCWludAkoKnByb2Nfb3Blbikoc3RydWN0IGlub2RlICos
IHN0cnVjdCBmaWxlICopOwogCXNzaXplX3QJKCpwcm9jX3JlYWQpKHN0cnVjdCBmaWxlICosIGNo
YXIgX191c2VyICosIHNpemVfdCwgbG9mZl90ICopOwotCXNzaXplX3QgKCpwcm9jX3JlYWRfaXRl
cikoc3RydWN0IGtpb2NiICosIHN0cnVjdCBpb3ZfaXRlciAqKTsKIAlzc2l6ZV90CSgqcHJvY193
cml0ZSkoc3RydWN0IGZpbGUgKiwgY29uc3QgY2hhciBfX3VzZXIgKiwgc2l6ZV90LCBsb2ZmX3Qg
Kik7CiAJbG9mZl90CSgqcHJvY19sc2Vlaykoc3RydWN0IGZpbGUgKiwgbG9mZl90LCBpbnQpOwog
CWludAkoKnByb2NfcmVsZWFzZSkoc3RydWN0IGlub2RlICosIHN0cnVjdCBmaWxlICopOwpkaWZm
IC0tZ2l0IGEvaW5jbHVkZS9saW51eC91YWNjZXNzLmggYi9pbmNsdWRlL2xpbnV4L3VhY2Nlc3Mu
aAppbmRleCBjN2M2ZThiODM0NGQuLmU1ZGEwODBhNzE4MSAxMDA2NDQKLS0tIGEvaW5jbHVkZS9s
aW51eC91YWNjZXNzLmgKKysrIGIvaW5jbHVkZS9saW51eC91YWNjZXNzLmgKQEAgLTEwLDcgKzEw
LDYgQEAKIAogI2luY2x1ZGUgPGFzbS91YWNjZXNzLmg+CiAKLSNpZmRlZiBDT05GSUdfU0VUX0ZT
CiAvKgogICogRm9yY2UgdGhlIHVhY2Nlc3Mgcm91dGluZXMgdG8gYmUgd2lyZWQgdXAgZm9yIGFj
dHVhbCB1c2Vyc3BhY2UgYWNjZXNzLAogICogb3ZlcnJpZGluZyBhbnkgcG9zc2libGUgc2V0X2Zz
KEtFUk5FTF9EUykgc3RpbGwgbGluZ2VyaW5nIGFyb3VuZC4gIFVuZG9uZQpAQCAtMjgsMjcgKzI3
LDEwIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBmb3JjZV91YWNjZXNzX2VuZChtbV9zZWdtZW50X3Qg
b2xkZnMpCiB7CiAJc2V0X2ZzKG9sZGZzKTsKIH0KLSNlbHNlIC8qIENPTkZJR19TRVRfRlMgKi8K
LXR5cGVkZWYgc3RydWN0IHsKLQkvKiBlbXB0eSBkdW1teSAqLwotfSBtbV9zZWdtZW50X3Q7Ci0K
LSNpZm5kZWYgVEFTS19TSVpFX01BWAorLyoqICNpZm5kZWYgVEFTS19TSVpFX01BWAogI2RlZmlu
ZSBUQVNLX1NJWkVfTUFYCQkJVEFTS19TSVpFCiAjZW5kaWYKLQotI2RlZmluZSB1YWNjZXNzX2tl
cm5lbCgpCQkoZmFsc2UpCi0jZGVmaW5lIHVzZXJfYWRkcl9tYXgoKQkJCShUQVNLX1NJWkVfTUFY
KQotCi1zdGF0aWMgaW5saW5lIG1tX3NlZ21lbnRfdCBmb3JjZV91YWNjZXNzX2JlZ2luKHZvaWQp
Ci17Ci0JcmV0dXJuIChtbV9zZWdtZW50X3QpIHsgfTsKLX0KLQotc3RhdGljIGlubGluZSB2b2lk
IGZvcmNlX3VhY2Nlc3NfZW5kKG1tX3NlZ21lbnRfdCBvbGRmcykKLXsKLX0KLSNlbmRpZiAvKiBD
T05GSUdfU0VUX0ZTICovCisqLwogCiAvKgogICogQXJjaGl0ZWN0dXJlcyBzaG91bGQgcHJvdmlk
ZSB0d28gcHJpbWl0aXZlcyAocmF3X2NvcHlfe3RvLGZyb219X3VzZXIoKSkKZGlmZiAtLWdpdCBh
L2tlcm5lbC9icGYvY2dyb3VwLmMgYi9rZXJuZWwvYnBmL2Nncm91cC5jCmluZGV4IDZhYTllMTBj
NjMzNS4uNDE2MTJlMjVjMDI5IDEwMDY0NAotLS0gYS9rZXJuZWwvYnBmL2Nncm91cC5jCisrKyBi
L2tlcm5lbC9icGYvY2dyb3VwLmMKQEAgLTEyMjYsNyArMTIyNiw3IEBAIGNvbnN0IHN0cnVjdCBi
cGZfdmVyaWZpZXJfb3BzIGNnX2Rldl92ZXJpZmllcl9vcHMgPSB7CiAgKi8KIGludCBfX2Nncm91
cF9icGZfcnVuX2ZpbHRlcl9zeXNjdGwoc3RydWN0IGN0bF90YWJsZV9oZWFkZXIgKmhlYWQsCiAJ
CQkJICAgc3RydWN0IGN0bF90YWJsZSAqdGFibGUsIGludCB3cml0ZSwKLQkJCQkgICBjaGFyICoq
YnVmLCBzaXplX3QgKnBjb3VudCwgbG9mZl90ICpwcG9zLAorCQkJCSAgIHZvaWQgKipidWYsIHNp
emVfdCAqcGNvdW50LCBsb2ZmX3QgKnBwb3MsCiAJCQkJICAgZW51bSBicGZfYXR0YWNoX3R5cGUg
dHlwZSkKIHsKIAlzdHJ1Y3QgYnBmX3N5c2N0bF9rZXJuIGN0eCA9IHsKZGlmZiAtLWdpdCBhL2xp
Yi90ZXN0X2JpdG1hcC5jIGIvbGliL3Rlc3RfYml0bWFwLmMKaW5kZXggNDQyNWExZGQ0ZWYxLi5k
ZjkwM2M1Mzk1MmIgMTAwNjQ0Ci0tLSBhL2xpYi90ZXN0X2JpdG1hcC5jCisrKyBiL2xpYi90ZXN0
X2JpdG1hcC5jCkBAIC0zNTQsMzcgKzM1NCw1MCBAQCBzdGF0aWMgY29uc3Qgc3RydWN0IHRlc3Rf
Yml0bWFwX3BhcnNlbGlzdCBwYXJzZWxpc3RfdGVzdHNbXSBfX2luaXRjb25zdCA9IHsKIAogfTsK
IAotc3RhdGljIHZvaWQgX19pbml0IHRlc3RfYml0bWFwX3BhcnNlbGlzdCh2b2lkKQorc3RhdGlj
IHZvaWQgX19pbml0IF9fdGVzdF9iaXRtYXBfcGFyc2VsaXN0KGludCBpc191c2VyKQogewogCWlu
dCBpOwogCWludCBlcnI7CiAJa3RpbWVfdCB0aW1lOwogCURFQ0xBUkVfQklUTUFQKGJtYXAsIDIw
NDgpOworCWNoYXIgKm1vZGUgPSBpc191c2VyID8gIl91c2VyIiAgOiAiIjsKIAogCWZvciAoaSA9
IDA7IGkgPCBBUlJBWV9TSVpFKHBhcnNlbGlzdF90ZXN0cyk7IGkrKykgewogI2RlZmluZSBwdGVz
dCBwYXJzZWxpc3RfdGVzdHNbaV0KIAotCQl0aW1lID0ga3RpbWVfZ2V0KCk7Ci0JCWVyciA9IGJp
dG1hcF9wYXJzZWxpc3QocHRlc3QuaW4sIGJtYXAsIHB0ZXN0Lm5iaXRzKTsKLQkJdGltZSA9IGt0
aW1lX2dldCgpIC0gdGltZTsKKwkJaWYgKGlzX3VzZXIpIHsKKwkJCW1tX3NlZ21lbnRfdCBvcmln
X2ZzID0gZ2V0X2ZzKCk7CisJCQlzaXplX3QgbGVuID0gc3RybGVuKHB0ZXN0LmluKTsKKworCQkJ
c2V0X2ZzKEtFUk5FTF9EUyk7CisJCQl0aW1lID0ga3RpbWVfZ2V0KCk7CisJCQllcnIgPSBiaXRt
YXBfcGFyc2VsaXN0X3VzZXIoKF9fZm9yY2UgY29uc3QgY2hhciBfX3VzZXIgKilwdGVzdC5pbiwg
bGVuLAorCQkJCQkJICAgIGJtYXAsIHB0ZXN0Lm5iaXRzKTsKKwkJCXRpbWUgPSBrdGltZV9nZXQo
KSAtIHRpbWU7CisJCQlzZXRfZnMob3JpZ19mcyk7CisJCX0gZWxzZSB7CisJCQl0aW1lID0ga3Rp
bWVfZ2V0KCk7CisJCQllcnIgPSBiaXRtYXBfcGFyc2VsaXN0KHB0ZXN0LmluLCBibWFwLCBwdGVz
dC5uYml0cyk7CisJCQl0aW1lID0ga3RpbWVfZ2V0KCkgLSB0aW1lOworCQl9CiAKIAkJaWYgKGVy
ciAhPSBwdGVzdC5lcnJubykgewotCQkJcHJfZXJyKCJwYXJzZWxpc3Q6ICVkOiBpbnB1dCBpcyAl
cywgZXJybm8gaXMgJWQsIGV4cGVjdGVkICVkXG4iLAotCQkJCQlpLCBwdGVzdC5pbiwgZXJyLCBw
dGVzdC5lcnJubyk7CisJCQlwcl9lcnIoInBhcnNlbGlzdCVzOiAlZDogaW5wdXQgaXMgJXMsIGVy
cm5vIGlzICVkLCBleHBlY3RlZCAlZFxuIiwKKwkJCQkJbW9kZSwgaSwgcHRlc3QuaW4sIGVyciwg
cHRlc3QuZXJybm8pOwogCQkJY29udGludWU7CiAJCX0KIAogCQlpZiAoIWVyciAmJiBwdGVzdC5l
eHBlY3RlZAogCQkJICYmICFfX2JpdG1hcF9lcXVhbChibWFwLCBwdGVzdC5leHBlY3RlZCwgcHRl
c3QubmJpdHMpKSB7Ci0JCQlwcl9lcnIoInBhcnNlbGlzdDogJWQ6IGlucHV0IGlzICVzLCByZXN1
bHQgaXMgMHglbHgsIGV4cGVjdGVkIDB4JWx4XG4iLAotCQkJCQlpLCBwdGVzdC5pbiwgYm1hcFsw
XSwKKwkJCXByX2VycigicGFyc2VsaXN0JXM6ICVkOiBpbnB1dCBpcyAlcywgcmVzdWx0IGlzIDB4
JWx4LCBleHBlY3RlZCAweCVseFxuIiwKKwkJCQkJbW9kZSwgaSwgcHRlc3QuaW4sIGJtYXBbMF0s
CiAJCQkJCSpwdGVzdC5leHBlY3RlZCk7CiAJCQljb250aW51ZTsKIAkJfQogCiAJCWlmIChwdGVz
dC5mbGFncyAmIFBBUlNFX1RJTUUpCi0JCQlwcl9lcnIoInBhcnNlbGlzdDogJWQ6IGlucHV0IGlz
ICclcycgT0ssIFRpbWU6ICVsbHVcbiIsCi0JCQkJCWksIHB0ZXN0LmluLCB0aW1lKTsKKwkJCXBy
X2VycigicGFyc2VsaXN0JXM6ICVkOiBpbnB1dCBpcyAnJXMnIE9LLCBUaW1lOiAlbGx1XG4iLAor
CQkJCQltb2RlLCBpLCBwdGVzdC5pbiwgdGltZSk7CiAKICN1bmRlZiBwdGVzdAogCX0KQEAgLTQz
MCw0MSArNDQzLDc1IEBAIHN0YXRpYyBjb25zdCBzdHJ1Y3QgdGVzdF9iaXRtYXBfcGFyc2VsaXN0
IHBhcnNlX3Rlc3RzW10gX19pbml0Y29uc3QgPSB7CiAjdW5kZWYgc3RlcAogfTsKIAotc3RhdGlj
IHZvaWQgX19pbml0IHRlc3RfYml0bWFwX3BhcnNlKHZvaWQpCitzdGF0aWMgdm9pZCBfX2luaXQg
X190ZXN0X2JpdG1hcF9wYXJzZShpbnQgaXNfdXNlcikKIHsKIAlpbnQgaTsKIAlpbnQgZXJyOwog
CWt0aW1lX3QgdGltZTsKIAlERUNMQVJFX0JJVE1BUChibWFwLCAyMDQ4KTsKKwljaGFyICptb2Rl
ID0gaXNfdXNlciA/ICJfdXNlciIgIDogIiI7CiAKIAlmb3IgKGkgPSAwOyBpIDwgQVJSQVlfU0la
RShwYXJzZV90ZXN0cyk7IGkrKykgewogCQlzdHJ1Y3QgdGVzdF9iaXRtYXBfcGFyc2VsaXN0IHRl
c3QgPSBwYXJzZV90ZXN0c1tpXTsKLQkJc2l6ZV90IGxlbiA9IHRlc3QuZmxhZ3MgJiBOT19MRU4g
PyBVSU5UX01BWCA6IHN0cmxlbih0ZXN0LmluKTsKIAotCQl0aW1lID0ga3RpbWVfZ2V0KCk7Ci0J
CWVyciA9IGJpdG1hcF9wYXJzZSh0ZXN0LmluLCBsZW4sIGJtYXAsIHRlc3QubmJpdHMpOwotCQl0
aW1lID0ga3RpbWVfZ2V0KCkgLSB0aW1lOworCQlpZiAoaXNfdXNlcikgeworCQkJc2l6ZV90IGxl
biA9IHN0cmxlbih0ZXN0LmluKTsKKwkJCW1tX3NlZ21lbnRfdCBvcmlnX2ZzID0gZ2V0X2ZzKCk7
CisKKwkJCXNldF9mcyhLRVJORUxfRFMpOworCQkJdGltZSA9IGt0aW1lX2dldCgpOworCQkJZXJy
ID0gYml0bWFwX3BhcnNlX3VzZXIoKF9fZm9yY2UgY29uc3QgY2hhciBfX3VzZXIgKil0ZXN0Lmlu
LCBsZW4sCisJCQkJCQlibWFwLCB0ZXN0Lm5iaXRzKTsKKwkJCXRpbWUgPSBrdGltZV9nZXQoKSAt
IHRpbWU7CisJCQlzZXRfZnMob3JpZ19mcyk7CisJCX0gZWxzZSB7CisJCQlzaXplX3QgbGVuID0g
dGVzdC5mbGFncyAmIE5PX0xFTiA/CisJCQkJVUlOVF9NQVggOiBzdHJsZW4odGVzdC5pbik7CisJ
CQl0aW1lID0ga3RpbWVfZ2V0KCk7CisJCQllcnIgPSBiaXRtYXBfcGFyc2UodGVzdC5pbiwgbGVu
LCBibWFwLCB0ZXN0Lm5iaXRzKTsKKwkJCXRpbWUgPSBrdGltZV9nZXQoKSAtIHRpbWU7CisJCX0K
IAogCQlpZiAoZXJyICE9IHRlc3QuZXJybm8pIHsKLQkJCXByX2VycigicGFyc2U6ICVkOiBpbnB1
dCBpcyAlcywgZXJybm8gaXMgJWQsIGV4cGVjdGVkICVkXG4iLAotCQkJCQlpLCB0ZXN0LmluLCBl
cnIsIHRlc3QuZXJybm8pOworCQkJcHJfZXJyKCJwYXJzZSVzOiAlZDogaW5wdXQgaXMgJXMsIGVy
cm5vIGlzICVkLCBleHBlY3RlZCAlZFxuIiwKKwkJCQkJbW9kZSwgaSwgdGVzdC5pbiwgZXJyLCB0
ZXN0LmVycm5vKTsKIAkJCWNvbnRpbnVlOwogCQl9CiAKIAkJaWYgKCFlcnIgJiYgdGVzdC5leHBl
Y3RlZAogCQkJICYmICFfX2JpdG1hcF9lcXVhbChibWFwLCB0ZXN0LmV4cGVjdGVkLCB0ZXN0Lm5i
aXRzKSkgewotCQkJcHJfZXJyKCJwYXJzZTogJWQ6IGlucHV0IGlzICVzLCByZXN1bHQgaXMgMHgl
bHgsIGV4cGVjdGVkIDB4JWx4XG4iLAotCQkJCQlpLCB0ZXN0LmluLCBibWFwWzBdLAorCQkJcHJf
ZXJyKCJwYXJzZSVzOiAlZDogaW5wdXQgaXMgJXMsIHJlc3VsdCBpcyAweCVseCwgZXhwZWN0ZWQg
MHglbHhcbiIsCisJCQkJCW1vZGUsIGksIHRlc3QuaW4sIGJtYXBbMF0sCiAJCQkJCSp0ZXN0LmV4
cGVjdGVkKTsKIAkJCWNvbnRpbnVlOwogCQl9CiAKIAkJaWYgKHRlc3QuZmxhZ3MgJiBQQVJTRV9U
SU1FKQotCQkJcHJfZXJyKCJwYXJzZTogJWQ6IGlucHV0IGlzICclcycgT0ssIFRpbWU6ICVsbHVc
biIsCi0JCQkJCWksIHRlc3QuaW4sIHRpbWUpOworCQkJcHJfZXJyKCJwYXJzZSVzOiAlZDogaW5w
dXQgaXMgJyVzJyBPSywgVGltZTogJWxsdVxuIiwKKwkJCQkJbW9kZSwgaSwgdGVzdC5pbiwgdGlt
ZSk7CiAJfQogfQogCitzdGF0aWMgdm9pZCBfX2luaXQgdGVzdF9iaXRtYXBfcGFyc2VsaXN0KHZv
aWQpCit7CisJX190ZXN0X2JpdG1hcF9wYXJzZWxpc3QoMCk7Cit9CisKK3N0YXRpYyB2b2lkIF9f
aW5pdCB0ZXN0X2JpdG1hcF9wYXJzZWxpc3RfdXNlcih2b2lkKQoreworCV9fdGVzdF9iaXRtYXBf
cGFyc2VsaXN0KDEpOworfQorCitzdGF0aWMgdm9pZCBfX2luaXQgdGVzdF9iaXRtYXBfcGFyc2Uo
dm9pZCkKK3sKKwlfX3Rlc3RfYml0bWFwX3BhcnNlKDApOworfQorCitzdGF0aWMgdm9pZCBfX2lu
aXQgdGVzdF9iaXRtYXBfcGFyc2VfdXNlcih2b2lkKQoreworCV9fdGVzdF9iaXRtYXBfcGFyc2Uo
MSk7Cit9CisKICNkZWZpbmUgRVhQMV9JTl9CSVRTCShzaXplb2YoZXhwMSkgKiA4KQogCiBzdGF0
aWMgdm9pZCBfX2luaXQgdGVzdF9iaXRtYXBfYXJyMzIodm9pZCkKQEAgLTYyOCw3ICs2NzUsOSBA
QCBzdGF0aWMgdm9pZCBfX2luaXQgc2VsZnRlc3Qodm9pZCkKIAl0ZXN0X3JlcGxhY2UoKTsKIAl0
ZXN0X2JpdG1hcF9hcnIzMigpOwogCXRlc3RfYml0bWFwX3BhcnNlKCk7CisJdGVzdF9iaXRtYXBf
cGFyc2VfdXNlcigpOwogCXRlc3RfYml0bWFwX3BhcnNlbGlzdCgpOworCXRlc3RfYml0bWFwX3Bh
cnNlbGlzdF91c2VyKCk7CiAJdGVzdF9tZW1fb3B0aW1pc2F0aW9ucygpOwogCXRlc3RfZm9yX2Vh
Y2hfc2V0X2NsdW1wOCgpOwogCXRlc3RfYml0bWFwX2N1dCgpOwpkaWZmIC0tZ2l0IGEvdG9vbHMv
dGVzdGluZy9zZWxmdGVzdHMvbGtkdG0vdGVzdHMudHh0IGIvdG9vbHMvdGVzdGluZy9zZWxmdGVz
dHMvbGtkdG0vdGVzdHMudHh0CmluZGV4IDc0YThkMzI5YTcyYy4uOWQyNjZlNzljNmEyIDEwMDY0
NAotLS0gYS90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy9sa2R0bS90ZXN0cy50eHQKKysrIGIvdG9v
bHMvdGVzdGluZy9zZWxmdGVzdHMvbGtkdG0vdGVzdHMudHh0CkBAIC05LDYgKzksNyBAQCBFWENF
UFRJT04KICNDT1JSVVBUX1NUQUNLX1NUUk9ORyBDcmFzaGVzIGVudGlyZSBzeXN0ZW0gb24gc3Vj
Y2VzcwogQ09SUlVQVF9MSVNUX0FERCBsaXN0X2FkZCBjb3JydXB0aW9uCiBDT1JSVVBUX0xJU1Rf
REVMIGxpc3RfZGVsIGNvcnJ1cHRpb24KK0NPUlJVUFRfVVNFUl9EUyBJbnZhbGlkIGFkZHJlc3Mg
bGltaXQgb24gdXNlci1tb2RlIHJldHVybgogU1RBQ0tfR1VBUkRfUEFHRV9MRUFESU5HCiBTVEFD
S19HVUFSRF9QQUdFX1RSQUlMSU5HCiBVTlNFVF9TTUVQIENSNCBiaXRzIHdlbnQgbWlzc2luZwpA
QCAtNjYsNSArNjcsNiBAQCBVU0VSQ09QWV9TVEFDS19GUkFNRV9UTwogVVNFUkNPUFlfU1RBQ0tf
RlJBTUVfRlJPTQogVVNFUkNPUFlfU1RBQ0tfQkVZT05ECiBVU0VSQ09QWV9LRVJORUwKK1VTRVJD
T1BZX0tFUk5FTF9EUwogU1RBQ0tMRUFLX0VSQVNJTkcgT0s6IHRoZSByZXN0IG9mIHRoZSB0aHJl
YWQgc3RhY2sgaXMgcHJvcGVybHkgZXJhc2VkCiBDRklfRk9SV0FSRF9QUk9UTwotLSAKMi4yOS4y
Cgo=


--=-AfVSSUZMOPYSVmfIS2ef
Content-Disposition: attachment; filename="reiser4-enabling-gnu-parted-3.4-1.patch"
Content-Type: text/x-patch; name="reiser4-enabling-gnu-parted-3.4-1.patch";
	charset="UTF-8"
Content-Transfer-Encoding: base64

RnJvbSBhODMwMzMyMzRlZTBiMmFmNTNiMjc3NWIxNDg1ODhhYTFjZWMwODkyIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBNZXR6dGxpIEluZm9ybWF0aW9uIFRlY2hub2xvZ3kgPGpvc2VA
dGV6Y2F0bGlwb2NhLm1ldHp0bGkuaXQ+CkRhdGU6IE1vbiwgMTUgTWFyIDIwMjEgMDU6Mzk6NTUg
LTA3MDAKU3ViamVjdDogW1BBVENIXSBJYyBjZSAoRmlyc3QpIGNvbW1pdCBSZWlzZXI0IC1lbmFi
bGluZyBHTlUgUGFydGVkIDMuNC0xCgotLS0KIGxpYnBhcnRlZC9NYWtlZmlsZS5hbSAgICAgICAg
ICB8ICAxICsKIGxpYnBhcnRlZC9mcy9NYWtlZmlsZS5hbSAgICAgICB8ICAzICsrCiBsaWJwYXJ0
ZWQvZnMvcmVpc2VyNC9yZWlzZXI0LmMgfCA3MSArKysrKysrKysrKysrKysrKysrKysrKysrKysr
KysrKysrCiBsaWJwYXJ0ZWQvbGlicGFydGVkLmMgICAgICAgICAgfCAgNCArKwogNCBmaWxlcyBj
aGFuZ2VkLCA3OSBpbnNlcnRpb25zKCspCiBjcmVhdGUgbW9kZSAxMDA2NDQgbGlicGFydGVkL2Zz
L3JlaXNlcjQvcmVpc2VyNC5jCgpkaWZmIC0tZ2l0IGEvbGlicGFydGVkL01ha2VmaWxlLmFtIGIv
bGlicGFydGVkL01ha2VmaWxlLmFtCmluZGV4IGNjZjhhNmExLi5hZWIxMDQ1YyAxMDA2NDQKLS0t
IGEvbGlicGFydGVkL01ha2VmaWxlLmFtCisrKyBiL2xpYnBhcnRlZC9NYWtlZmlsZS5hbQpAQCAt
NCw2ICs0LDcgQEAKICMKICMgVGhpcyBmaWxlIG1heSBiZSBtb2RpZmllZCBhbmQvb3IgZGlzdHJp
YnV0ZWQgd2l0aG91dCByZXN0cmljdGlvbi4KIAorQVVUT01BS0VfT1BUSU9OUyA9IHN1YmRpci1v
YmplY3RzCiBTVUJESVJTX0NIRUNLID0KIGlmIEhBVkVfQ0hFQ0sKIFNVQkRJUlNfQ0hFQ0sgKz0g
dGVzdHMKZGlmZiAtLWdpdCBhL2xpYnBhcnRlZC9mcy9NYWtlZmlsZS5hbSBiL2xpYnBhcnRlZC9m
cy9NYWtlZmlsZS5hbQppbmRleCA3MWRkZDU2Yi4uYjNhMDliODYgMTAwNjQ0Ci0tLSBhL2xpYnBh
cnRlZC9mcy9NYWtlZmlsZS5hbQorKysgYi9saWJwYXJ0ZWQvZnMvTWFrZWZpbGUuYW0KQEAgLTQs
NiArNCw4IEBACiAjCiAjIFRoaXMgZmlsZSBtYXkgYmUgbW9kaWZpZWQgYW5kL29yIGRpc3RyaWJ1
dGVkIHdpdGhvdXQgcmVzdHJpY3Rpb24uCiAKK0FVVE9NQUtFX09QVElPTlMgPSBzdWJkaXItb2Jq
ZWN0cworCiBwYXJ0ZWRpbmNsdWRlZGlyID0gLUkkKHRvcF9idWlsZGRpcikvaW5jbHVkZSAtSSQo
dG9wX3NyY2RpcikvaW5jbHVkZSAtSSQodG9wX3NyY2RpcikvbGliCiAKIEFNX0NGTEFHUyA9ICQo
V0FSTl9DRkxBR1MpCkBAIC00Nyw2ICs0OSw3IEBAIGxpYmZzX2xhX1NPVVJDRVMgPQkJXAogICBu
dGZzL250ZnMuYwkJCVwKICAgcmVpc2VyZnMvcmVpc2VyZnMuYwkJXAogICByZWlzZXJmcy9yZWlz
ZXJmcy5oCQlcCisgIHJlaXNlcjQvcmVpc2VyNC5jCQlcCiAgIHVkZi91ZGYuYwkJCVwKICAgdWZz
L3Vmcy5jCQkJXAogICB4ZnMvcGxhdGZvcm1fZGVmcy5oCQlcCmRpZmYgLS1naXQgYS9saWJwYXJ0
ZWQvZnMvcmVpc2VyNC9yZWlzZXI0LmMgYi9saWJwYXJ0ZWQvZnMvcmVpc2VyNC9yZWlzZXI0LmMK
bmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAuLjBhODZlMGNmCi0tLSAvZGV2L251
bGwKKysrIGIvbGlicGFydGVkL2ZzL3JlaXNlcjQvcmVpc2VyNC5jCkBAIC0wLDAgKzEsNzEgQEAK
Ky8qCisgICAgbGlicGFydGVkIC0gYSBsaWJyYXJ5IGZvciBtYW5pcHVsYXRpbmcgZGlzayBwYXJ0
aXRpb25zCisgICAgQ29weXJpZ2h0IChDKSAyMDAwIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwg
SW5jLgorCisgICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0
cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKKyAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdO
VSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQorICAgIHRoZSBGcmVlIFNv
ZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExpY2Vuc2UsIG9yCisg
ICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KKworICAgIFRoaXMgcHJvZ3Jh
bSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAorICAg
IGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJh
bnR5IG9mCisgICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQ
VVJQT1NFLiAgU2VlIHRoZQorICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3Jl
IGRldGFpbHMuCisKKyAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBH
TlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQorICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBp
ZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCisgICAgRm91bmRhdGlvbiwgSW5jLiwg
NTkgVGVtcGxlIFBsYWNlLCBTdWl0ZSAzMzAsIEJvc3RvbiwgTUEgIDAyMTExLTEzMDcgIFVTQQor
Ki8KKworI2luY2x1ZGUgPGNvbmZpZy5oPgorCisjaW5jbHVkZSA8cGFydGVkL3BhcnRlZC5oPgor
I2luY2x1ZGUgPHBhcnRlZC9lbmRpYW4uaD4KKworI2lmIEVOQUJMRV9OTFMKKyMgIGluY2x1ZGUg
PGxpYmludGwuaD4KKyMgIGRlZmluZSBfKFN0cmluZykgZGdldHRleHQgKFBBQ0tBR0UsIFN0cmlu
ZykKKyNlbHNlCisjICBkZWZpbmUgXyhTdHJpbmcpIChTdHJpbmcpCisjZW5kaWYgLyogRU5BQkxF
X05MUyAqLworCisjaW5jbHVkZSA8dW5pc3RkLmg+CisjaW5jbHVkZSA8c3RyaW5nLmg+CisKK3N0
YXRpYyBQZWRHZW9tZXRyeSoKK3JlaXNlcjRfcHJvYmUgKFBlZEdlb21ldHJ5KiBnZW9tKQorewor
CWNoYXIJYnVmWzUxMl07CisKKwlpZiAoIXBlZF9nZW9tZXRyeV9yZWFkIChnZW9tLCBidWYsIDEy
OCwgMSkpCisJCXJldHVybiAwOwkKKwkKKwlpZiAoIHN0cmNtcCggYnVmLCAiUmVJc0VyNCIgKSA9
PSAwICkKKwkJcmV0dXJuIHBlZF9nZW9tZXRyeV9kdXBsaWNhdGUoIGdlb20gKSA7CisKKwllbHNl
CisJCXJldHVybiBOVUxMOworfQorCitzdGF0aWMgUGVkRmlsZVN5c3RlbU9wcyByZWlzZXI0X29w
cyA9IHsKKwlwcm9iZToJCXJlaXNlcjRfcHJvYmUsCit9OworCitzdGF0aWMgUGVkRmlsZVN5c3Rl
bVR5cGUgcmVpc2VyNF90eXBlID0geworCW5leHQ6CU5VTEwsCisJb3BzOgkmcmVpc2VyNF9vcHMs
CisJbmFtZToJInJlaXNlcjQiCit9OworCit2b2lkCitwZWRfZmlsZV9zeXN0ZW1fcmVpc2VyNF9p
bml0ICgpCit7CisJcGVkX2ZpbGVfc3lzdGVtX3R5cGVfcmVnaXN0ZXIgKCZyZWlzZXI0X3R5cGUp
OworfQorCit2b2lkCitwZWRfZmlsZV9zeXN0ZW1fcmVpc2VyNF9kb25lICgpCit7CisJcGVkX2Zp
bGVfc3lzdGVtX3R5cGVfdW5yZWdpc3RlciAoJnJlaXNlcjRfdHlwZSk7Cit9CisKZGlmZiAtLWdp
dCBhL2xpYnBhcnRlZC9saWJwYXJ0ZWQuYyBiL2xpYnBhcnRlZC9saWJwYXJ0ZWQuYwppbmRleCBk
MzRlOTBkNS4uZDhmM2I1YjMgMTAwNjQ0Ci0tLSBhL2xpYnBhcnRlZC9saWJwYXJ0ZWQuYworKysg
Yi9saWJwYXJ0ZWQvbGlicGFydGVkLmMKQEAgLTExMiw2ICsxMTIsNyBAQCBleHRlcm4gdm9pZCBw
ZWRfZmlsZV9zeXN0ZW1faGZzX2luaXQgKHZvaWQpOwogZXh0ZXJuIHZvaWQgcGVkX2ZpbGVfc3lz
dGVtX2ZhdF9pbml0ICh2b2lkKTsKIGV4dGVybiB2b2lkIHBlZF9maWxlX3N5c3RlbV9mMmZzX2lu
aXQgKHZvaWQpOwogZXh0ZXJuIHZvaWQgcGVkX2ZpbGVfc3lzdGVtX2V4dDJfaW5pdCAodm9pZCk7
CitleHRlcm4gdm9pZCBwZWRfZmlsZV9zeXN0ZW1fcmVpc2VyNF9pbml0ICh2b2lkKTsKIGV4dGVy
biB2b2lkIHBlZF9maWxlX3N5c3RlbV9uaWxmczJfaW5pdCAodm9pZCk7CiBleHRlcm4gdm9pZCBw
ZWRfZmlsZV9zeXN0ZW1fYnRyZnNfaW5pdCAodm9pZCk7CiBleHRlcm4gdm9pZCBwZWRfZmlsZV9z
eXN0ZW1fdWRmX2luaXQgKHZvaWQpOwpAQCAtMTMxLDYgKzEzMiw3IEBAIGluaXRfZmlsZV9zeXN0
ZW1fdHlwZXMgKCkKIAlwZWRfZmlsZV9zeXN0ZW1fZmF0X2luaXQgKCk7CiAJcGVkX2ZpbGVfc3lz
dGVtX2YyZnNfaW5pdCAoKTsKIAlwZWRfZmlsZV9zeXN0ZW1fZXh0Ml9pbml0ICgpOworCXBlZF9m
aWxlX3N5c3RlbV9yZWlzZXI0X2luaXQgKCk7CiAJcGVkX2ZpbGVfc3lzdGVtX25pbGZzMl9pbml0
ICgpOwogCXBlZF9maWxlX3N5c3RlbV9idHJmc19pbml0ICgpOwogCXBlZF9maWxlX3N5c3RlbV91
ZGZfaW5pdCAoKTsKQEAgLTE5OSw2ICsyMDEsNyBAQCBleHRlcm4gdm9pZCBwZWRfZmlsZV9zeXN0
ZW1fbnRmc19kb25lICh2b2lkKTsKIGV4dGVybiB2b2lkIHBlZF9maWxlX3N5c3RlbV9yZWlzZXJm
c19kb25lICh2b2lkKTsKIGV4dGVybiB2b2lkIHBlZF9maWxlX3N5c3RlbV91ZnNfZG9uZSAodm9p
ZCk7CiBleHRlcm4gdm9pZCBwZWRfZmlsZV9zeXN0ZW1feGZzX2RvbmUgKHZvaWQpOworZXh0ZXJu
IHZvaWQgcGVkX2ZpbGVfc3lzdGVtX3JlaXNlcjRfZG9uZSAodm9pZCk7CiBleHRlcm4gdm9pZCBw
ZWRfZmlsZV9zeXN0ZW1fYW1pZ2FfZG9uZSAodm9pZCk7CiBleHRlcm4gdm9pZCBwZWRfZmlsZV9z
eXN0ZW1fYnRyZnNfZG9uZSAodm9pZCk7CiBleHRlcm4gdm9pZCBwZWRfZmlsZV9zeXN0ZW1fdWRm
X2RvbmUgKHZvaWQpOwpAQCAtMjE5LDYgKzIyMiw3IEBAIGRvbmVfZmlsZV9zeXN0ZW1fdHlwZXMg
KCkKIAlwZWRfZmlsZV9zeXN0ZW1fcmVpc2VyZnNfZG9uZSAoKTsKIAlwZWRfZmlsZV9zeXN0ZW1f
dWZzX2RvbmUgKCk7CiAJcGVkX2ZpbGVfc3lzdGVtX3hmc19kb25lICgpOworCXBlZF9maWxlX3N5
c3RlbV9yZWlzZXI0X2RvbmUgKCk7CiAJcGVkX2ZpbGVfc3lzdGVtX2FtaWdhX2RvbmUgKCk7CiAJ
cGVkX2ZpbGVfc3lzdGVtX2J0cmZzX2RvbmUgKCk7CiAJcGVkX2ZpbGVfc3lzdGVtX3VkZl9kb25l
ICgpOwotLSAKMi4zMC4xCgo=


--=-AfVSSUZMOPYSVmfIS2ef
Content-Disposition: attachment; filename="reiser4progs-v1.2.1-uuid.patch"
Content-Type: text/x-patch; name="reiser4progs-v1.2.1-uuid.patch"; charset="UTF-8"
Content-Transfer-Encoding: base64

RnJvbSAzMTQ0OWYyZmU3MTA0NWE1Mzc5M2M5NTJjOTdhMjFmN2QzMTIyMWE4IE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBNZXR6dGxpIEluZm9ybWF0aW9uIFRlY2hub2xvZ3kgPGpvc2VA
dGV6Y2F0bGlwb2NhLm1ldHp0bGkuaXQ+CkRhdGU6IFN1biwgMTQgTWFyIDIwMjEgMDA6MDg6NDAg
LTA4MDAKU3ViamVjdDogW1BBVENIXSBJYyBvbWUgKFNlY29uZCkgY29tbWl0IFJlaXNlcjQgU0ZS
TiA0LjAuMiB2MS4yLjEgZml4IGZvciBudWxsCiBVVUlECgotLS0KIGxpYnJlcGFpci9tYXN0ZXIu
YyB8IDEyICsrKysrKysrKystLQogMSBmaWxlIGNoYW5nZWQsIDEwIGluc2VydGlvbnMoKyksIDIg
ZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvbGlicmVwYWlyL21hc3Rlci5jIGIvbGlicmVwYWly
L21hc3Rlci5jCmluZGV4IGM3ODA2YzUuLmRhZGYyMWEgMTAwNjQ0Ci0tLSBhL2xpYnJlcGFpci9t
YXN0ZXIuYworKysgYi9saWJyZXBhaXIvbWFzdGVyLmMKQEAgLTQsNiArNCwxNCBAQAogICAgbGli
cmVwYWlyL21hc3Rlci5jIC0gbWV0aG9kcyBhcmUgbmVlZGVkIGZvciB3b3JrIHdpdGggYnJva2Vu
IG1hc3RlciAKICAgIHN1cGVyIGJsb2NrLiAqLwogCisjaWZkZWYgSEFWRV9DT05GSUdfSAorIyAg
aW5jbHVkZSA8Y29uZmlnLmg+CisjZW5kaWYKKworI2lmIGRlZmluZWQoSEFWRV9MSUJVVUlEKSAm
JiBkZWZpbmVkKEhBVkVfVVVJRF9VVUlEX0gpCisjICBpbmNsdWRlIDx1dWlkL3V1aWQuaD4KKyNl
bmRpZgorCiAjaW5jbHVkZSA8cmVwYWlyL2xpYnJlcGFpci5oPgogCiAvKiBDaGVja3MgdGhlIGJs
b2Nrc2l6ZS4gKi8KQEAgLTM0Nyw5ICszNTUsOSBAQCB2b2lkIHJlcGFpcl9tYXN0ZXJfcHJpbnQo
cmVpc2VyNF9tYXN0ZXJfdCAqbWFzdGVyLAogCQkJICBwaWQsIHBsdWcgPyBwbHVnLT5sYWJlbCA6
ICJhYnNlbnQiKTsKIAogI2lmIGRlZmluZWQoSEFWRV9MSUJVVUlEKSAmJiBkZWZpbmVkKEhBVkVf
VVVJRF9VVUlEX0gpCi0JaWYgKCptYXN0ZXItPmVudC5tc191dWlkICE9ICdcMCcpIHsKKwlpZiAo
IXV1aWRfaXNfbnVsbCgodW5zaWduZWQgY2hhciAqKW1hc3Rlci0+ZW50Lm1zX3V1aWQpKSB7CiAJ
CWNoYXIgdXVpZFszN107Ci0JCQorCiAJCXV1aWRbMzZdID0gJ1wwJzsKIAkJdW5wYXJzZShyZWlz
ZXI0X21hc3Rlcl9nZXRfdXVpZChtYXN0ZXIpLCB1dWlkKTsKIAkJYWFsX3N0cmVhbV9mb3JtYXQo
c3RyZWFtLCAidXVpZDpcdFx0JXNcbiIsIHV1aWQpOwotLSAKMi4zMC4xCgo=


--=-AfVSSUZMOPYSVmfIS2ef--

